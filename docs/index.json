{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Ham Cockpit Plugin API Reference | Ham Cockpit",
    "keywords": "Ham Cockpit Plugin API Reference Work in progress, about 70% done."
  },
  "api/VE3NEA.HamCockpit.DspFun.AudclntErrorCodes.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.AudclntErrorCodes.html",
    "title": "Enum AudclntErrorCodes | Ham Cockpit",
    "keywords": "Enum AudclntErrorCodes Audio Client error codes missing from CSCore . Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public enum AudclntErrorCodes Fields Name Description AUDCLNT_E_ALREADY_INITIALIZED AUDCLNT_E_BUFDURATION_PERIOD_NOT_EQUAL AUDCLNT_E_BUFFER_ERROR AUDCLNT_E_BUFFER_OPERATION_PENDING AUDCLNT_E_BUFFER_SIZE_ERROR AUDCLNT_E_BUFFER_SIZE_NOT_ALIGNED AUDCLNT_E_BUFFER_TOO_LARGE AUDCLNT_E_CPUUSAGE_EXCEEDED AUDCLNT_E_DEVICE_IN_USE AUDCLNT_E_DEVICE_INVALIDATED AUDCLNT_E_ENDPOINT_CREATE_FAILED AUDCLNT_E_EVENTHANDLE_NOT_EXPECTED AUDCLNT_E_EVENTHANDLE_NOT_SET AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED AUDCLNT_E_EXCLUSIVE_MODE_ONLY AUDCLNT_E_INCORRECT_BUFFER_SIZE AUDCLNT_E_INVALID_SIZE AUDCLNT_E_NO_SINGLE_PROCESS AUDCLNT_E_NOT_INITIALIZED AUDCLNT_E_NOT_STOPPED AUDCLNT_E_OUT_OF_ORDER AUDCLNT_E_SERVICE_NOT_RUNNING AUDCLNT_E_THREAD_NOT_REGISTERED AUDCLNT_E_UNSUPPORTED_FORMAT AUDCLNT_E_WRONG_ENDPOINT_TYPE"
  },
  "api/VE3NEA.HamCockpit.DspFun.AudioClientErrors.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.AudioClientErrors.html",
    "title": "Class AudioClientErrors | Ham Cockpit",
    "keywords": "Class AudioClientErrors Returns error messages for the Audio Client error codes. Inheritance Object AudioClientErrors Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class AudioClientErrors Methods Name Description Message(Int32) Gets the error message for the specified error code."
  },
  "api/VE3NEA.HamCockpit.DspFun.AudioClientErrors.Message.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.AudioClientErrors.Message.html",
    "title": "Method Message | Ham Cockpit",
    "keywords": "Method Message View Source Message(Int32) Gets the error message for the specified error code. Declaration public static string Message(int errorCode) Parameters Type Name Description Int32 errorCode The error code. Returns Type Description String The error message."
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseFft.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseFft.-ctor.html",
    "title": "Constructor BaseFft | Ham Cockpit",
    "keywords": "Constructor BaseFft View Source BaseFft(Int32) Initializes a new instance of the BaseFft class. Declaration public BaseFft(int size) Parameters Type Name Description Int32 size The size of the FFT transform."
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseFft.Dispose.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseFft.Dispose.html",
    "title": "Method Dispose | Ham Cockpit",
    "keywords": "Method Dispose View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements IDisposable.Dispose()"
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseFft.FreqData.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseFft.FreqData.html",
    "title": "Field FreqData | Ham Cockpit",
    "keywords": "Field FreqData The buffer for the frequency domain data. Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public Complex32[] FreqData Returns Type Description MathNet.Numerics.Complex32 []"
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseFft.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseFft.html",
    "title": "Class BaseFft | Ham Cockpit",
    "keywords": "Class BaseFft The base class that implements common functionality for the RealFft and ComplexFft classes. Inheritance Object BaseFft ComplexFft RealFft Implements IDisposable Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class BaseFft : IDisposable Remarks This class uses the Intel Integrated Performance Primitives library to compute the fast Fourier transform. Constructors Name Description BaseFft(Int32) Initializes a new instance of the BaseFft class. Fields Name Description FreqData The buffer for the frequency domain data. IPP_FFT_NODIV_BY_ANY LnToDb order specBuffer workBuf Methods Name Description Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. LogPowerSpectrum(Single[]) Compute the log power spectrum from the power spectrum. PowerSpectrum(Single[]) Compute the power spectrum from the complex spectrum in the FreqData array. SlicePower(Int32, Int32) Compute the given slice of the power spectrum. See Also RealFft ComplexFft"
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseFft.IPP_FFT_NODIV_BY_ANY.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseFft.IPP_FFT_NODIV_BY_ANY.html",
    "title": "Field IPP_FFT_NODIV_BY_ANY | Ham Cockpit",
    "keywords": "Field IPP_FFT_NODIV_BY_ANY Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax protected const int IPP_FFT_NODIV_BY_ANY = 8 Returns Type Description Int32"
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseFft.LnToDb.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseFft.LnToDb.html",
    "title": "Field LnToDb | Ham Cockpit",
    "keywords": "Field LnToDb Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax protected static readonly float LnToDb Returns Type Description Single"
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseFft.LogPowerSpectrum.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseFft.LogPowerSpectrum.html",
    "title": "Method LogPowerSpectrum | Ham Cockpit",
    "keywords": "Method LogPowerSpectrum View Source LogPowerSpectrum(Single[]) Compute the log power spectrum from the power spectrum. Declaration public float[] LogPowerSpectrum(float[] power = null) Parameters Type Name Description Single [] power The power spectrum. Returns Type Description Single [] The log power spectrum."
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseFft.order.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseFft.order.html",
    "title": "Field order | Ham Cockpit",
    "keywords": "Field order Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax protected readonly int order Returns Type Description Int32"
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseFft.PowerSpectrum.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseFft.PowerSpectrum.html",
    "title": "Method PowerSpectrum | Ham Cockpit",
    "keywords": "Method PowerSpectrum View Source PowerSpectrum(Single[]) Compute the power spectrum from the complex spectrum in the FreqData array. Declaration public float[] PowerSpectrum(float[] power = null) Parameters Type Name Description Single [] power The buffer for the power spectrum, or null . Returns Type Description Single [] The power spectrum."
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseFft.SlicePower.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseFft.SlicePower.html",
    "title": "Method SlicePower | Ham Cockpit",
    "keywords": "Method SlicePower View Source SlicePower(Int32, Int32) Compute the given slice of the power spectrum. Declaration public float[] SlicePower(int start, int length) Parameters Type Name Description Int32 start The start of the slice. Int32 length The length of the slice. Returns Type Description Single [] The slice of the power spectrum. Remarks This method re-orders the two halves of the spectrum to put the negative frequencies at the bottom, takes the slice of the spectrum and computes the log power."
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseFft.specBuffer.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseFft.specBuffer.html",
    "title": "Field specBuffer | Ham Cockpit",
    "keywords": "Field specBuffer Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax protected byte *specBuffer Returns Type Description Byte *"
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseFft.workBuf.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseFft.workBuf.html",
    "title": "Field workBuf | Ham Cockpit",
    "keywords": "Field workBuf Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax protected byte[] workBuf Returns Type Description Byte []"
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseSlidingFilter.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseSlidingFilter.-ctor.html",
    "title": "Constructor BaseSlidingFilter | Ham Cockpit",
    "keywords": "Constructor BaseSlidingFilter View Source BaseSlidingFilter(Int32) Initializes a new instance of the class. Declaration public BaseSlidingFilter(int length) Parameters Type Name Description Int32 length The length of the sliding filter."
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseSlidingFilter.FilterArrayInplace.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseSlidingFilter.FilterArrayInplace.html",
    "title": "Method FilterArrayInplace | Ham Cockpit",
    "keywords": "Method FilterArrayInplace View Source FilterArrayInplace(Single[]) Filters the array of input data in place. Declaration public void FilterArrayInplace(float[] data) Parameters Type Name Description Single [] data The data. Exceptions Type Condition ArgumentException Sliding Filter error: input too short"
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseSlidingFilter.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseSlidingFilter.html",
    "title": "Class BaseSlidingFilter | Ham Cockpit",
    "keywords": "Class BaseSlidingFilter The base class that implements common functionality for the SlidingMin and SlidingMax classes. Inheritance Object BaseSlidingFilter SlidingMax SlidingMin Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public abstract class BaseSlidingFilter Constructors Name Description BaseSlidingFilter(Int32) Initializes a new instance of the class. Methods Name Description FilterArrayInplace(Single[]) Filters the array of input data in place. MinOrMax(Single, Single) Returns either the minimum or maximum of two values. Process(Single) Processes the specified input value."
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseSlidingFilter.MinOrMax.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseSlidingFilter.MinOrMax.html",
    "title": "Method MinOrMax | Ham Cockpit",
    "keywords": "Method MinOrMax View Source MinOrMax(Single, Single) Returns either the minimum or maximum of two values. Declaration protected abstract float MinOrMax(float x, float y) Parameters Type Name Description Single x The first value. Single y The second value. Returns Type Description Single The minimum or the maximum of two values. Remarks The child class overrides this method to return either the minimum or maximum."
  },
  "api/VE3NEA.HamCockpit.DspFun.BaseSlidingFilter.Process.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.BaseSlidingFilter.Process.html",
    "title": "Method Process | Ham Cockpit",
    "keywords": "Method Process View Source Process(Single) Processes the specified input value. Declaration public float Process(float value) Parameters Type Name Description Single value The output value. Returns Type Description Single The filtered value."
  },
  "api/VE3NEA.HamCockpit.DspFun.ChannelSelector.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ChannelSelector.-ctor.html",
    "title": "Constructor ChannelSelector | Ham Cockpit",
    "keywords": "Constructor ChannelSelector View Source ChannelSelector(ISampleSource, ChannelMask) Creates a new instance of the ChannelSelector class from an existing sample source. Declaration public ChannelSelector(ISampleSource source, ChannelMask channel) Parameters Type Name Description CSCore.ISampleSource source The sample source. CSCore.ChannelMask channel The channel to select. Exceptions Type Condition ArgumentNullException source is null ArgumentException The source is not stereo or Wrong channel."
  },
  "api/VE3NEA.HamCockpit.DspFun.ChannelSelector.Dispose.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ChannelSelector.Dispose.html",
    "title": "Method Dispose | Ham Cockpit",
    "keywords": "Method Dispose View Source Dispose(Boolean) Disposes allocated resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing True to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides CSCore.SampleAggregatorBase.Dispose(System.Boolean)"
  },
  "api/VE3NEA.HamCockpit.DspFun.ChannelSelector.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ChannelSelector.html",
    "title": "Class ChannelSelector | Ham Cockpit",
    "keywords": "Class ChannelSelector Selects one of the channels from a stereo data source. Inheritance Object CSCore.SampleAggregatorBase ChannelSelector Implements CSCore.ISampleAggregator CSCore.ISampleSource CSCore.IAggregator < Single , CSCore.ISampleSource > CSCore.IReadableAudioSource < Single > CSCore.IAudioSource IDisposable Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class ChannelSelector : SampleAggregatorBase, ISampleAggregator, ISampleSource, IAggregator<float, ISampleSource>, IReadableAudioSource<float>, IAudioSource, IDisposable Constructors Name Description ChannelSelector(ISampleSource, ChannelMask) Creates a new instance of the ChannelSelector class from an existing sample source. Properties Name Description Length Gets the data length in samples. Position Gets or sets the position in samples. WaveFormat Gets the CSCore.IAudioSource.WaveFormat of the waveform-audio data. Methods Name Description Dispose(Boolean) Disposes allocated resources. Read(Single[], Int32, Int32) Reads a sequence of samples from the CSCore.SampleAggregatorBase and advances the position within the stream by the number of samples read."
  },
  "api/VE3NEA.HamCockpit.DspFun.ChannelSelector.Length.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ChannelSelector.Length.html",
    "title": "Property Length | Ham Cockpit",
    "keywords": "Property Length View Source Length Gets the data length in samples. Declaration public override long Length { get; } Property Value Type Description Int64 Overrides CSCore.SampleAggregatorBase.Length"
  },
  "api/VE3NEA.HamCockpit.DspFun.ChannelSelector.Position.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ChannelSelector.Position.html",
    "title": "Property Position | Ham Cockpit",
    "keywords": "Property Position View Source Position Gets or sets the position in samples. Declaration public override long Position { get; set; } Property Value Type Description Int64 Overrides CSCore.SampleAggregatorBase.Position"
  },
  "api/VE3NEA.HamCockpit.DspFun.ChannelSelector.Read.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ChannelSelector.Read.html",
    "title": "Method Read | Ham Cockpit",
    "keywords": "Method Read View Source Read(Single[], Int32, Int32) Reads a sequence of samples from the CSCore.SampleAggregatorBase and advances the position within the stream by the number of samples read. Declaration public override int Read(float[] buffer, int offset, int count) Parameters Type Name Description Single [] buffer An array of floats. When this method returns, the buffer contains the specified float array with the values between offset and ( offset + count - 1) replaced by the floats read from the current source. Int32 offset The zero-based offset in the buffer at which to begin storing the data read from the current stream. Int32 count The maximum number of samples to read from the current source. Returns Type Description Int32 The total number of samples read into the buffer. Overrides CSCore.SampleAggregatorBase.Read(System.Single[], System.Int32, System.Int32)"
  },
  "api/VE3NEA.HamCockpit.DspFun.ChannelSelector.WaveFormat.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ChannelSelector.WaveFormat.html",
    "title": "Property WaveFormat | Ham Cockpit",
    "keywords": "Property WaveFormat View Source WaveFormat Gets the CSCore.IAudioSource.WaveFormat of the waveform-audio data. Declaration public override WaveFormat WaveFormat { get; } Property Value Type Description CSCore.WaveFormat Overrides CSCore.SampleAggregatorBase.WaveFormat"
  },
  "api/VE3NEA.HamCockpit.DspFun.ComplexFft.ComputeForward.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ComplexFft.ComputeForward.html",
    "title": "Method ComputeForward | Ham Cockpit",
    "keywords": "Method ComputeForward View Source ComputeForward() Computes the forward FFT transform. Declaration public void ComputeForward()"
  },
  "api/VE3NEA.HamCockpit.DspFun.ComplexFft.ComputeInverse.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ComplexFft.ComputeInverse.html",
    "title": "Method ComputeInverse | Ham Cockpit",
    "keywords": "Method ComputeInverse View Source ComputeInverse() Computes the inverse FFT transform. Declaration public void ComputeInverse()"
  },
  "api/VE3NEA.HamCockpit.DspFun.ComplexFft.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ComplexFft.-ctor.html",
    "title": "Constructor ComplexFft | Ham Cockpit",
    "keywords": "Constructor ComplexFft View Source ComplexFft(Int32) Initializes a new instance of the ComplexFft class. Declaration public ComplexFft(int size) Parameters Type Name Description Int32 size The size of the FFT transform."
  },
  "api/VE3NEA.HamCockpit.DspFun.ComplexFft.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ComplexFft.html",
    "title": "Class ComplexFft | Ham Cockpit",
    "keywords": "Class ComplexFft Computes forward and inverse complex FFT. Inheritance Object BaseFft ComplexFft Implements IDisposable Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class ComplexFft : BaseFft, IDisposable Remarks This class uses the Intel Integrated Performance Primitives library to compute the fast Fourier transform. Constructors Name Description ComplexFft(Int32) Initializes a new instance of the ComplexFft class. Fields Name Description TimeData The buffer for the time domain data. Methods Name Description ComputeForward() Computes the forward FFT transform. ComputeInverse() Computes the inverse FFT transform."
  },
  "api/VE3NEA.HamCockpit.DspFun.ComplexFft.TimeData.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ComplexFft.TimeData.html",
    "title": "Field TimeData | Ham Cockpit",
    "keywords": "Field TimeData The buffer for the time domain data. Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public readonly Complex32[] TimeData Returns Type Description MathNet.Numerics.Complex32 []"
  },
  "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.-ctor.html",
    "title": "Constructor ComplexFirFilter | Ham Cockpit",
    "keywords": "Constructor ComplexFirFilter View Source ComplexFirFilter(Complex32[], IppAlgType) Initializes a new instance of the ComplexFirFilter class. Declaration public ComplexFirFilter(Complex32[] taps, IppAlgType algType = IppAlgType.ippAlgAuto) Parameters Type Name Description MathNet.Numerics.Complex32 [] taps The taps. VE3NEA.HamCockpit.DspFun.IppAlgType algType Type of the algorithm."
  },
  "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.Dispose.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.Dispose.html",
    "title": "Method Dispose | Ham Cockpit",
    "keywords": "Method Dispose View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements IDisposable.Dispose()"
  },
  "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.Format.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.Format.html",
    "title": "Property Format | Ham Cockpit",
    "keywords": "Property Format View Source Format Gets the format of the output data. Declaration public SignalFormat Format { get; } Property Value Type Description SignalFormat The format of the output data. Implements ISampleStream.Format Remarks Since the filter does not know its passband (all it has is the taps array), it does not update the Format property. The calling code must reflect the new bandwidth in its own Format"
  },
  "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.html",
    "title": "Class ComplexFirFilter | Ham Cockpit",
    "keywords": "Class ComplexFirFilter Applies a FIR filter to complex-valued data. Inheritance Object ComplexFirFilter Implements IIqProcessor IInitSampleStream ISampleStream IDisposable Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class ComplexFirFilter : IIqProcessor, IInitSampleStream, ISampleStream, IDisposable Constructors Name Description ComplexFirFilter(Complex32[], IppAlgType) Initializes a new instance of the ComplexFirFilter class. Properties Name Description Format Gets the format of the output data. Taps Gets or sets the filter taps. Methods Name Description Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Initialize(ISampleStream) Initializes the filter for processing data from the specified source. Read(Single[], Int32, Int32) Reads the data into the provided buffer. Events Name Description SamplesAvailable Occurs when filtered samples are available."
  },
  "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.Initialize.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.Initialize.html",
    "title": "Method Initialize | Ham Cockpit",
    "keywords": "Method Initialize View Source Initialize(ISampleStream) Initializes the filter for processing data from the specified source. Declaration public void Initialize(ISampleStream source) Parameters Type Name Description ISampleStream source The source of the data. Implements IInitSampleStream.Initialize(ISampleStream)"
  },
  "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.Read.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.Read.html",
    "title": "Method Read | Ham Cockpit",
    "keywords": "Method Read View Source Read(Single[], Int32, Int32) Reads the data into the provided buffer. Declaration public int Read(float[] buffer, int offset, int count) Parameters Type Name Description Single [] buffer The buffer. Int32 offset The offset to the first value. Int32 count The count of the values to read. Returns Type Description Int32 The number of read values. Implements ISampleStream.Read(Single[], Int32, Int32)"
  },
  "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.SamplesAvailable.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.SamplesAvailable.html",
    "title": "Event SamplesAvailable | Ham Cockpit",
    "keywords": "Event SamplesAvailable Occurs when filtered samples are available. Implements SamplesAvailable Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public event EventHandler<SamplesAvailableEventArgs> SamplesAvailable Returns Type Description EventHandler < SamplesAvailableEventArgs >"
  },
  "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.Taps.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.ComplexFirFilter.Taps.html",
    "title": "Property Taps | Ham Cockpit",
    "keywords": "Property Taps View Source Taps Gets or sets the filter taps. Declaration public Complex32[] Taps { get; set; } Property Value Type Description MathNet.Numerics.Complex32 [] The filter taps."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.ApproximateRatio.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.ApproximateRatio.html",
    "title": "Method ApproximateRatio | Ham Cockpit",
    "keywords": "Method ApproximateRatio View Source ApproximateRatio(Double, Double) Finds a rational approximation of a floating point value. Declaration public static (int L, int M) ApproximateRatio(double ratio, double maxError) Parameters Type Name Description Double ratio The floating point value. Double maxError The maximum error. Returns Type Description ValueTuple < Int32 , Int32 > The approximating ratio, L/M. Remarks Finds the Diophantine approximation to the given floating point value. Useful for the design of low complexity resamplers when the exact output rate is not required."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.ArrayToString.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.ArrayToString.html",
    "title": "Method ArrayToString | Ham Cockpit",
    "keywords": "Method ArrayToString View Source ArrayToString(Single[]) Converts an array of floating point values to text, one value per line. Declaration public static string ArrayToString(float[] array) Parameters Type Name Description Single [] array The array of values. Returns Type Description String The text."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.BlackmanHarrisWindow.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.BlackmanHarrisWindow.html",
    "title": "Method BlackmanHarrisWindow | Ham Cockpit",
    "keywords": "Method BlackmanHarrisWindow View Source BlackmanHarrisWindow(Int32) Generates the Blackman-Harris window. Declaration public static float[] BlackmanHarrisWindow(int length) Parameters Type Name Description Int32 length The window length. Returns Type Description Single [] The window coefficients."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.BlackmanSincKernel.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.BlackmanSincKernel.html",
    "title": "Method BlackmanSincKernel | Ham Cockpit",
    "keywords": "Method BlackmanSincKernel View Source BlackmanSincKernel(Single, Int32) Generates the Blackman Sinc filter kernel. Declaration public static float[] BlackmanSincKernel(float Fc, int length) Parameters Type Name Description Single Fc The normalized cutoff frequency. Int32 length The kernel length. Returns Type Description Single [] The filter kernel."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.BlackmanWindow.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.BlackmanWindow.html",
    "title": "Method BlackmanWindow | Ham Cockpit",
    "keywords": "Method BlackmanWindow View Source BlackmanWindow(Int32) Generates the Blackman window. Declaration public static float[] BlackmanWindow(int length) Parameters Type Name Description Int32 length The window length. Returns Type Description Single [] The window coefficients."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.ComplexToStrided.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.ComplexToStrided.html",
    "title": "Method ComplexToStrided | Ham Cockpit",
    "keywords": "Method ComplexToStrided View Source ComplexToStrided(Complex32[], Int32, Single[], Int32, Int32, Int32) Convert data format. Declaration public static void ComplexToStrided(Complex32[] source, int srcOffset, float[] destination, int dstOffset, int dstStride, int complexCount) Parameters Type Name Description MathNet.Numerics.Complex32 [] source The source array. Int32 srcOffset The offset to the first value in the source array. Single [] destination The destination array. Int32 dstOffset The offset to the first value in the destination array. Int32 dstStride The stride in the destination array. Int32 complexCount The number of the complex values to output."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.COMPONENTS_IN_COMPLEX.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.COMPONENTS_IN_COMPLEX.html",
    "title": "Field COMPONENTS_IN_COMPLEX | Ham Cockpit",
    "keywords": "Field COMPONENTS_IN_COMPLEX The number of components in a complex value. Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public const int COMPONENTS_IN_COMPLEX = 2 Returns Type Description Int32 Remarks There are two floating point components in a complex value, the real part and the imaginary part."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.FloatToComplex32.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.FloatToComplex32.html",
    "title": "Method FloatToComplex32 | Ham Cockpit",
    "keywords": "Method FloatToComplex32 View Source FloatToComplex32(Single[]) Unpacks complex values from the array of floats. Declaration public static Complex32[] FloatToComplex32(float[] source) Parameters Type Name Description Single [] source The floating point values. Returns Type Description MathNet.Numerics.Complex32 [] The complex values."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.FloatToStrided.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.FloatToStrided.html",
    "title": "Method FloatToStrided | Ham Cockpit",
    "keywords": "Method FloatToStrided View Source FloatToStrided(Single[], Int32, Single[], Int32, Int32, Int32) Convert data format. Declaration public static void FloatToStrided(float[] source, int srcOffset, float[] destination, int dstOffset, int dstStride, int count) Parameters Type Name Description Single [] source The source array. Int32 srcOffset The offset to the first value in the source array. Single [] destination The destination array. Int32 dstOffset The offset to the first value in the destination array. Int32 dstStride The stride in the destination array. Int32 count The number of the values to output."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.FromDb.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.FromDb.html",
    "title": "Method FromDb | Ham Cockpit",
    "keywords": "Method FromDb View Source FromDb(Single) Converts the ratio in decibels to power ratio. Declaration public static float FromDb(float x) Parameters Type Name Description Single x The ratio in decibels. Returns Type Description Single The power ratio."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.FromDb2.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.FromDb2.html",
    "title": "Method FromDb2 | Ham Cockpit",
    "keywords": "Method FromDb2 View Source FromDb2(Single) Converts the ratio in decibels to voltage ratio. Declaration public static float FromDb2(float x) Parameters Type Name Description Single x The ratio in decibels. Returns Type Description Single The voltage ratio."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.html",
    "title": "Class Dsp | Ham Cockpit",
    "keywords": "Class Dsp A collection of functions related to digital signal processing. Inheritance Object Dsp Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public static class Dsp Fields Name Description COMPONENTS_IN_COMPLEX The number of components in a complex value. Methods Name Description ApproximateRatio(Double, Double) Finds a rational approximation of a floating point value. ArrayToString(Single[]) Converts an array of floating point values to text, one value per line. BlackmanHarrisWindow(Int32) Generates the Blackman-Harris window. BlackmanSincKernel(Single, Int32) Generates the Blackman Sinc filter kernel. BlackmanWindow(Int32) Generates the Blackman window. ComplexToStrided(Complex32[], Int32, Single[], Int32, Int32, Int32) Convert data format. FloatToComplex32(Single[]) Unpacks complex values from the array of floats. FloatToStrided(Single[], Int32, Single[], Int32, Int32, Int32) Convert data format. FromDb(Single) Converts the ratio in decibels to power ratio. FromDb2(Single) Converts the ratio in decibels to voltage ratio. Mix(Complex32[], Double, Double) Performs in-place mixing of the specified data with a complex sinusoid. Normalize(Single[]) Normalizes the specified array of floating point data to unity sum. Sinc(Single, Int32) Generates the Sinc filter kernel. StridedToComplex(Single[], Int32, Int32, Complex32[], Int32, Int32) Unpacks complex values from the array of floats. StridedToComplex(Single[], Int32, Int32, Single[], Int32, Int32) Convert data format. StridedToFloat(Single[], Int32, Int32, Single[], Int32, Int32) Convert data format. SwapIQ(Single[], Int32, Int32) Swaps the I and Q channels in the array of data. ToDb(Single) Converts power ratio to decibels. ToDb2(Single) Converts voltage ratio to decibels."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.Mix.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.Mix.html",
    "title": "Method Mix | Ham Cockpit",
    "keywords": "Method Mix View Source Mix(Complex32[], Double, Double) Performs in-place mixing of the specified data with a complex sinusoid. Declaration public static void Mix(Complex32[] data, double frequency, double phase = 0) Parameters Type Name Description MathNet.Numerics.Complex32 [] data The data. Double frequency The frequency. Double phase The starting phase."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.Normalize.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.Normalize.html",
    "title": "Method Normalize | Ham Cockpit",
    "keywords": "Method Normalize View Source Normalize(Single[]) Normalizes the specified array of floating point data to unity sum. Declaration public static void Normalize(float[] data) Parameters Type Name Description Single [] data The data."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.Sinc.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.Sinc.html",
    "title": "Method Sinc | Ham Cockpit",
    "keywords": "Method Sinc View Source Sinc(Single, Int32) Generates the Sinc filter kernel. Declaration public static float[] Sinc(float Fc, int length) Parameters Type Name Description Single Fc The normalized cutoff frequency. Int32 length The kernel length. Returns Type Description Single [] The filter kernel."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.StridedToComplex.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.StridedToComplex.html",
    "title": "Method StridedToComplex | Ham Cockpit",
    "keywords": "Method StridedToComplex View Source StridedToComplex(Single[], Int32, Int32, Complex32[], Int32, Int32) Unpacks complex values from the array of floats. Declaration public static void StridedToComplex(float[] source, int srcOffset, int srcStride, Complex32[] destination, int dstOffset, int complexCount) Parameters Type Name Description Single [] source The source array. Int32 srcOffset The offset to the first value in the source array. Int32 srcStride The stride in the source array. MathNet.Numerics.Complex32 [] destination The destination array. Int32 dstOffset The offset to the first value in the destination array. Int32 complexCount The number of the complex values to output. View Source StridedToComplex(Single[], Int32, Int32, Single[], Int32, Int32) Convert data format. Declaration public static void StridedToComplex(float[] source, int srcOffset, int srcStride, float[] destination, int dstOffset, int complexCount) Parameters Type Name Description Single [] source The source array. Int32 srcOffset The offset to the first value in the source array. Int32 srcStride The stride in the source array. Single [] destination The destination array. Int32 dstOffset The offset to the first value in the destination array. Int32 complexCount The number of the complex values to output."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.StridedToFloat.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.StridedToFloat.html",
    "title": "Method StridedToFloat | Ham Cockpit",
    "keywords": "Method StridedToFloat View Source StridedToFloat(Single[], Int32, Int32, Single[], Int32, Int32) Convert data format. Declaration public static void StridedToFloat(float[] source, int srcOffset, int srcStride, float[] destination, int dstOffset, int count) Parameters Type Name Description Single [] source The source array. Int32 srcOffset The offset to the first value in the source array. Int32 srcStride The stride in the source array. Single [] destination The destination array. Int32 dstOffset The offset to the first value in the destination array. Int32 count The number of the values to output."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.SwapIQ.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.SwapIQ.html",
    "title": "Method SwapIQ | Ham Cockpit",
    "keywords": "Method SwapIQ View Source SwapIQ(Single[], Int32, Int32) Swaps the I and Q channels in the array of data. Declaration public static void SwapIQ(float[] buffer, int floatOffset, int complexCount) Parameters Type Name Description Single [] buffer The buffer. Int32 floatOffset The offset to the first floating point value to convert. Int32 complexCount The number of complex values to convert."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.ToDb.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.ToDb.html",
    "title": "Method ToDb | Ham Cockpit",
    "keywords": "Method ToDb View Source ToDb(Single) Converts power ratio to decibels. Declaration public static float ToDb(float x) Parameters Type Name Description Single x The power ratio. Returns Type Description Single The ratio in decibels."
  },
  "api/VE3NEA.HamCockpit.DspFun.Dsp.ToDb2.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Dsp.ToDb2.html",
    "title": "Method ToDb2 | Ham Cockpit",
    "keywords": "Method ToDb2 View Source ToDb2(Single) Converts voltage ratio to decibels. Declaration public static float ToDb2(float x) Parameters Type Name Description Single x The voltage ratio. Returns Type Description Single The ratio in decibels."
  },
  "api/VE3NEA.HamCockpit.DspFun.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.html",
    "title": "Namespace VE3NEA.HamCockpit.DspFun | Ham Cockpit",
    "keywords": "Namespace VE3NEA.HamCockpit.DspFun Classes AudioClientErrors Returns error messages for the Audio Client error codes. BaseFft The base class that implements common functionality for the RealFft and ComplexFft classes. BaseSlidingFilter The base class that implements common functionality for the SlidingMin and SlidingMax classes. ChannelSelector Selects one of the channels from a stereo data source. ComplexFft Computes forward and inverse complex FFT. ComplexFirFilter Applies a FIR filter to complex-valued data. Dsp A collection of functions related to digital signal processing. Ipp The IPP PInvoke declarations missing from CSIntelPerfLibs . IppException Represents errors that occur during the execution of the IPP functions. IppHelper Includes helper functions that use the IPP library . IppResampler Signal resampler based on the IPP library . Mixer Mixes the input complex-valued data with a complex sinusoid. MovingAverage Applies a moving average filter to the floating point data. MultipassAverage Applies a multi-pass moving average filter to the floating point data. OmniRigClient A wrapper around the OmniRig COM object. RealFft Computes forward and inverse real FFT. RealFirFilter Applies a FIR filter to real-valued data. Resampler RingBuffer SampleSourceWrapper SidebandFlipper SlidingMax Computes the sliding maximum of the input values. SlidingMin Computes the sliding minimum of the input values. Enums AudclntErrorCodes Audio Client error codes missing from CSCore . RigStatus The status of the CAT connection to the radio."
  },
  "api/VE3NEA.HamCockpit.DspFun.Ipp.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Ipp.html",
    "title": "Class Ipp | Ham Cockpit",
    "keywords": "Class Ipp The IPP PInvoke declarations missing from CSIntelPerfLibs . Inheritance Object Ipp Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class Ipp Remarks This class contains the IPP PInvoke declarations missing from the CSIntelPerfLibs library. Please see the Integrated Performance Primitives documentation for the description of these functions."
  },
  "api/VE3NEA.HamCockpit.DspFun.IppException.Check.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.IppException.Check.html",
    "title": "Method Check | Ham Cockpit",
    "keywords": "Method Check View Source Check(IppStatus) Checks the IPP status code and raises an IppException if the code represents an error. Declaration public static void Check(IppStatus status) Parameters Type Name Description CSIntel.Ipp.IppStatus status The status code. Exceptions Type Condition IppException status represents an error."
  },
  "api/VE3NEA.HamCockpit.DspFun.IppException.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.IppException.-ctor.html",
    "title": "Constructor IppException | Ham Cockpit",
    "keywords": "Constructor IppException View Source IppException(IppStatus) Initializes a new instance of the IppException class. Declaration public IppException(IppStatus status) Parameters Type Name Description CSIntel.Ipp.IppStatus status The IPP status code."
  },
  "api/VE3NEA.HamCockpit.DspFun.IppException.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.IppException.html",
    "title": "Class IppException | Ham Cockpit",
    "keywords": "Class IppException Represents errors that occur during the execution of the IPP functions. Inheritance Object Exception IppException Implements ISerializable _Exception Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class IppException : Exception, ISerializable, _Exception Constructors Name Description IppException(IppStatus) Initializes a new instance of the IppException class. Methods Name Description Check(IppStatus) Checks the IPP status code and raises an IppException if the code represents an error."
  },
  "api/VE3NEA.HamCockpit.DspFun.IppHelper.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.IppHelper.html",
    "title": "Class IppHelper | Ham Cockpit",
    "keywords": "Class IppHelper Includes helper functions that use the IPP library . Inheritance Object IppHelper Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class IppHelper Methods Name Description PowerToLogPower(Single[]) Converts power ratios to decibels in-place."
  },
  "api/VE3NEA.HamCockpit.DspFun.IppHelper.PowerToLogPower.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.IppHelper.PowerToLogPower.html",
    "title": "Method PowerToLogPower | Ham Cockpit",
    "keywords": "Method PowerToLogPower View Source PowerToLogPower(Single[]) Converts power ratios to decibels in-place. Declaration public static void PowerToLogPower(float[] power) Parameters Type Name Description Single [] power The values to convert."
  },
  "api/VE3NEA.HamCockpit.DspFun.IppResampler.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.IppResampler.-ctor.html",
    "title": "Constructor IppResampler | Ham Cockpit",
    "keywords": "Constructor IppResampler View Source IppResampler(Int32, Int32, Int32, Single, Single) Initializes a new instance of the IppResampler class. Declaration public IppResampler(int inRate, int outRate, int requestedFilterOrder, float filterCutoff, float kaiserAlpha) Parameters Type Name Description Int32 inRate The input sampling rate. Int32 outRate The output sampling rate. Int32 requestedFilterOrder The requested filter order. Single filterCutoff The 6-dB cutoff frequency of the anti-aliasing filter as a fraction of the Nyquist frequency. Must be in the range of 0...1. Single kaiserAlpha The alpha parameter of the Kaiser filter."
  },
  "api/VE3NEA.HamCockpit.DspFun.IppResampler.Dispose.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.IppResampler.Dispose.html",
    "title": "Method Dispose | Ham Cockpit",
    "keywords": "Method Dispose View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements IDisposable.Dispose()"
  },
  "api/VE3NEA.HamCockpit.DspFun.IppResampler.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.IppResampler.html",
    "title": "Class IppResampler | Ham Cockpit",
    "keywords": "Class IppResampler Signal resampler based on the IPP library . Inheritance Object IppResampler Implements IDisposable Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class IppResampler : IDisposable Constructors Name Description IppResampler(Int32, Int32, Int32, Single, Single) Initializes a new instance of the IppResampler class. Fields Name Description OutData The resampled data. Methods Name Description Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Process(Single[], Int32, Int32, Int32) Processes the specified input data."
  },
  "api/VE3NEA.HamCockpit.DspFun.IppResampler.OutData.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.IppResampler.OutData.html",
    "title": "Field OutData | Ham Cockpit",
    "keywords": "Field OutData The resampled data. Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public float[] OutData Returns Type Description Single []"
  },
  "api/VE3NEA.HamCockpit.DspFun.IppResampler.Process.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.IppResampler.Process.html",
    "title": "Method Process | Ham Cockpit",
    "keywords": "Method Process View Source Process(Single[], Int32, Int32, Int32) Processes the specified input data. Declaration public int Process(float[] inputData, int inputOffset, int inputStride, int count) Parameters Type Name Description Single [] inputData The input data. Int32 inputOffset The offset of the first value to process. Int32 inputStride The stride in the input data. Int32 count The number of values to process. Returns Type Description Int32 The number of resampled values."
  },
  "api/VE3NEA.HamCockpit.DspFun.Mixer.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Mixer.-ctor.html",
    "title": "Constructor Mixer | Ham Cockpit",
    "keywords": "Constructor Mixer View Source Mixer(Int64) Initializes a new instance of the Mixer class. Declaration public Mixer(long frequency) Parameters Type Name Description Int64 frequency The frequency."
  },
  "api/VE3NEA.HamCockpit.DspFun.Mixer.Format.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Mixer.Format.html",
    "title": "Property Format | Ham Cockpit",
    "keywords": "Property Format View Source Format Gets the format of the output data. Declaration public SignalFormat Format { get; } Property Value Type Description SignalFormat The format of the output data. Implements ISampleStream.Format"
  },
  "api/VE3NEA.HamCockpit.DspFun.Mixer.Frequency.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Mixer.Frequency.html",
    "title": "Property Frequency | Ham Cockpit",
    "keywords": "Property Frequency View Source Frequency Gets or sets the frequency of the complex sinusoid. Declaration public long Frequency { get; set; } Property Value Type Description Int64 The frequency of the complex sinusoid."
  },
  "api/VE3NEA.HamCockpit.DspFun.Mixer.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Mixer.html",
    "title": "Class Mixer | Ham Cockpit",
    "keywords": "Class Mixer Mixes the input complex-valued data with a complex sinusoid. Inheritance Object Mixer Implements IIqProcessor IInitSampleStream ISampleStream Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class Mixer : IIqProcessor, IInitSampleStream, ISampleStream Constructors Name Description Mixer(Int64) Initializes a new instance of the Mixer class. Properties Name Description Format Gets the format of the output data. Frequency Gets or sets the frequency of the complex sinusoid. Methods Name Description Initialize(ISampleStream) Initializes the mixer to process data from the specified source. Read(Single[], Int32, Int32) Reads processed data to the specified buffer. Events Name Description SamplesAvailable Occurs when output samples are available."
  },
  "api/VE3NEA.HamCockpit.DspFun.Mixer.Initialize.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Mixer.Initialize.html",
    "title": "Method Initialize | Ham Cockpit",
    "keywords": "Method Initialize View Source Initialize(ISampleStream) Initializes the mixer to process data from the specified source. Declaration public void Initialize(ISampleStream source) Parameters Type Name Description ISampleStream source The source. Implements IInitSampleStream.Initialize(ISampleStream) Exceptions Type Condition Exception Input to the mixer must be complex."
  },
  "api/VE3NEA.HamCockpit.DspFun.Mixer.Read.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Mixer.Read.html",
    "title": "Method Read | Ham Cockpit",
    "keywords": "Method Read View Source Read(Single[], Int32, Int32) Reads processed data to the specified buffer. Declaration public int Read(float[] buffer, int offset, int count) Parameters Type Name Description Single [] buffer The buffer. Int32 offset The offset to the first value. Int32 count The number of values to process. Returns Type Description Int32 The number of processed values. Implements ISampleStream.Read(Single[], Int32, Int32)"
  },
  "api/VE3NEA.HamCockpit.DspFun.Mixer.SamplesAvailable.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Mixer.SamplesAvailable.html",
    "title": "Event SamplesAvailable | Ham Cockpit",
    "keywords": "Event SamplesAvailable Occurs when output samples are available. Implements SamplesAvailable Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public event EventHandler<SamplesAvailableEventArgs> SamplesAvailable Returns Type Description EventHandler < SamplesAvailableEventArgs >"
  },
  "api/VE3NEA.HamCockpit.DspFun.MovingAverage.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.MovingAverage.-ctor.html",
    "title": "Constructor MovingAverage | Ham Cockpit",
    "keywords": "Constructor MovingAverage View Source MovingAverage(Int32) Initializes a new instance of the MovingAverage class. Declaration public MovingAverage(int length) Parameters Type Name Description Int32 length The length of the filter."
  },
  "api/VE3NEA.HamCockpit.DspFun.MovingAverage.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.MovingAverage.html",
    "title": "Class MovingAverage | Ham Cockpit",
    "keywords": "Class MovingAverage Applies a moving average filter to the floating point data. Inheritance Object MovingAverage Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class MovingAverage Remarks The classical moving average, y[n] = y[n-1] + x[n] - x[n-k] , fails when applied to the floating point data because (a + b) - b is not always equal to a when a and b are floating point values. For example, (1E-6 + 1E6) - 1E6 evaluates to 0 , not to 1E-6 . The algorithm used in this class is designed to prevent such errors. The filtered output is not scaled, it needs to be multiplied by the Scale factor to preserve the signal amplitude. Constructors Name Description MovingAverage(Int32) Initializes a new instance of the MovingAverage class. Properties Name Description Scale Gets the scaling factor. Methods Name Description Process(Single) Processes the specified value."
  },
  "api/VE3NEA.HamCockpit.DspFun.MovingAverage.Process.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.MovingAverage.Process.html",
    "title": "Method Process | Ham Cockpit",
    "keywords": "Method Process View Source Process(Single) Processes the specified value. Declaration public float Process(float value) Parameters Type Name Description Single value The input value. Returns Type Description Single The filtered value."
  },
  "api/VE3NEA.HamCockpit.DspFun.MovingAverage.Scale.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.MovingAverage.Scale.html",
    "title": "Property Scale | Ham Cockpit",
    "keywords": "Property Scale View Source Scale Gets the scaling factor. Declaration public float Scale { get; } Property Value Type Description Single The scaling factor that the filtered values need to be multiplied by."
  },
  "api/VE3NEA.HamCockpit.DspFun.MultipassAverage.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.MultipassAverage.-ctor.html",
    "title": "Constructor MultipassAverage | Ham Cockpit",
    "keywords": "Constructor MultipassAverage View Source MultipassAverage(Int32, Int32) Initializes a new instance of the MultipassAverage class. Declaration public MultipassAverage(int length, int passCount) Parameters Type Name Description Int32 length The length of the filter in each pass. Int32 passCount The number of passes."
  },
  "api/VE3NEA.HamCockpit.DspFun.MultipassAverage.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.MultipassAverage.html",
    "title": "Class MultipassAverage | Ham Cockpit",
    "keywords": "Class MultipassAverage Applies a multi-pass moving average filter to the floating point data. Inheritance Object MultipassAverage Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class MultipassAverage Constructors Name Description MultipassAverage(Int32, Int32) Initializes a new instance of the MultipassAverage class. Properties Name Description Scale Gets the scaling factor. Methods Name Description Process(Single) Filters the specified value with proper scaling. ProcessUnscaled(Single) Filters the specified value but does not scale the output."
  },
  "api/VE3NEA.HamCockpit.DspFun.MultipassAverage.Process.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.MultipassAverage.Process.html",
    "title": "Method Process | Ham Cockpit",
    "keywords": "Method Process View Source Process(Single) Filters the specified value with proper scaling. Declaration public float Process(float value) Parameters Type Name Description Single value The value to filter. Returns Type Description Single The filtered value."
  },
  "api/VE3NEA.HamCockpit.DspFun.MultipassAverage.ProcessUnscaled.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.MultipassAverage.ProcessUnscaled.html",
    "title": "Method ProcessUnscaled | Ham Cockpit",
    "keywords": "Method ProcessUnscaled View Source ProcessUnscaled(Single) Filters the specified value but does not scale the output. Declaration public float ProcessUnscaled(float value) Parameters Type Name Description Single value The value to filter. Returns Type Description Single The filtered value."
  },
  "api/VE3NEA.HamCockpit.DspFun.MultipassAverage.Scale.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.MultipassAverage.Scale.html",
    "title": "Property Scale | Ham Cockpit",
    "keywords": "Property Scale View Source Scale Gets the scaling factor. Declaration public float Scale { get; } Property Value Type Description Single The scaling factor that the value returned from ProcessUnscaled(Single) needs to be multiplied by."
  },
  "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.Active.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.Active.html",
    "title": "Property Active | Ham Cockpit",
    "keywords": "Property Active View Source Active Gets or sets a value indicating whether this OmniRigClient is active. Declaration public bool Active { get; set; } Property Value Type Description Boolean true if active; otherwise, false ."
  },
  "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.GetStatusText.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.GetStatusText.html",
    "title": "Method GetStatusText | Ham Cockpit",
    "keywords": "Method GetStatusText View Source GetStatusText() Gets the text that describes the current status of OmniRig. Declaration public string GetStatusText() Returns Type Description String The status text."
  },
  "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.html",
    "title": "Class OmniRigClient | Ham Cockpit",
    "keywords": "Class OmniRigClient A wrapper around the OmniRig COM object. Inheritance Object OmniRigClient Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class OmniRigClient Properties Name Description Active Gets or sets a value indicating whether this OmniRigClient is active. Mode Gets or sets the mode. RigNo Gets or sets the rig number. RxFrequency Gets or sets the RX frequency. Status Gets the status of the CAT connection. Methods Name Description GetStatusText() Gets the text that describes the current status of OmniRig. ShowDialog() Shows the OmniRig configuration dialog. Events Name Description ModeChanged Occurs when the mode changes. StatusChanged Occurs when the CAT connection status changes. Tuned Occurs when the dial frequency changes."
  },
  "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.Mode.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.Mode.html",
    "title": "Property Mode | Ham Cockpit",
    "keywords": "Property Mode View Source Mode Gets or sets the mode. Declaration public string Mode { get; set; } Property Value Type Description String The mode selected in the radio."
  },
  "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.ModeChanged.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.ModeChanged.html",
    "title": "Event ModeChanged | Ham Cockpit",
    "keywords": "Event ModeChanged Occurs when the mode changes. Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public event EventHandler ModeChanged Returns Type Description EventHandler"
  },
  "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.RigNo.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.RigNo.html",
    "title": "Property RigNo | Ham Cockpit",
    "keywords": "Property RigNo View Source RigNo Gets or sets the rig number. Declaration public int RigNo { get; set; } Property Value Type Description Int32 The number of the rig to use, 1 or 2."
  },
  "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.RxFrequency.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.RxFrequency.html",
    "title": "Property RxFrequency | Ham Cockpit",
    "keywords": "Property RxFrequency View Source RxFrequency Gets or sets the RX frequency. Declaration public int RxFrequency { get; set; } Property Value Type Description Int32 The RX frequency."
  },
  "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.ShowDialog.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.ShowDialog.html",
    "title": "Method ShowDialog | Ham Cockpit",
    "keywords": "Method ShowDialog View Source ShowDialog() Shows the OmniRig configuration dialog. Declaration public void ShowDialog()"
  },
  "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.Status.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.Status.html",
    "title": "Property Status | Ham Cockpit",
    "keywords": "Property Status View Source Status Gets the status of the CAT connection. Declaration public RigStatus Status { get; } Property Value Type Description RigStatus The status of the CAT connection."
  },
  "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.StatusChanged.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.StatusChanged.html",
    "title": "Event StatusChanged | Ham Cockpit",
    "keywords": "Event StatusChanged Occurs when the CAT connection status changes. Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public event EventHandler StatusChanged Returns Type Description EventHandler"
  },
  "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.Tuned.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.OmniRigClient.Tuned.html",
    "title": "Event Tuned | Ham Cockpit",
    "keywords": "Event Tuned Occurs when the dial frequency changes. Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public event EventHandler Tuned Returns Type Description EventHandler"
  },
  "api/VE3NEA.HamCockpit.DspFun.RealFft.ComputeForward.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RealFft.ComputeForward.html",
    "title": "Method ComputeForward | Ham Cockpit",
    "keywords": "Method ComputeForward View Source ComputeForward() Computes the forward FFT transform. Declaration public void ComputeForward()"
  },
  "api/VE3NEA.HamCockpit.DspFun.RealFft.ComputeInverse.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RealFft.ComputeInverse.html",
    "title": "Method ComputeInverse | Ham Cockpit",
    "keywords": "Method ComputeInverse View Source ComputeInverse() Computes the inverse FFT transform. Declaration public void ComputeInverse()"
  },
  "api/VE3NEA.HamCockpit.DspFun.RealFft.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RealFft.-ctor.html",
    "title": "Constructor RealFft | Ham Cockpit",
    "keywords": "Constructor RealFft View Source RealFft(Int32) Initializes a new instance of the RealFft class. Declaration public RealFft(int size) Parameters Type Name Description Int32 size The size of the FFT transform."
  },
  "api/VE3NEA.HamCockpit.DspFun.RealFft.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RealFft.html",
    "title": "Class RealFft | Ham Cockpit",
    "keywords": "Class RealFft Computes forward and inverse real FFT. Inheritance Object BaseFft RealFft Implements IDisposable Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class RealFft : BaseFft, IDisposable Remarks This class uses the Intel Integrated Performance Primitives library to compute the fast Fourier transform. Constructors Name Description RealFft(Int32) Initializes a new instance of the RealFft class. Fields Name Description TimeData The buffer for the time domain data. Methods Name Description ComputeForward() Computes the forward FFT transform. ComputeInverse() Computes the inverse FFT transform."
  },
  "api/VE3NEA.HamCockpit.DspFun.RealFft.TimeData.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RealFft.TimeData.html",
    "title": "Field TimeData | Ham Cockpit",
    "keywords": "Field TimeData The buffer for the time domain data. Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public readonly float[] TimeData Returns Type Description Single []"
  },
  "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.-ctor.html",
    "title": "Constructor RealFirFilter | Ham Cockpit",
    "keywords": "Constructor RealFirFilter View Source RealFirFilter(Single[], IppAlgType) Declaration public RealFirFilter(float[] taps, IppAlgType algType = IppAlgType.ippAlgAuto) Parameters Type Name Description Single [] taps VE3NEA.HamCockpit.DspFun.IppAlgType algType"
  },
  "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.Dispose.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.Dispose.html",
    "title": "Method Dispose | Ham Cockpit",
    "keywords": "Method Dispose View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements IDisposable.Dispose()"
  },
  "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.Format.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.Format.html",
    "title": "Property Format | Ham Cockpit",
    "keywords": "Property Format View Source Format Declaration public SignalFormat Format { get; } Property Value Type Description SignalFormat Implements ISampleStream.Format"
  },
  "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.html",
    "title": "Class RealFirFilter | Ham Cockpit",
    "keywords": "Class RealFirFilter Applies a FIR filter to real-valued data. Inheritance Object RealFirFilter Implements IIqProcessor IInitSampleStream ISampleStream IDisposable Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class RealFirFilter : IIqProcessor, IInitSampleStream, ISampleStream, IDisposable Constructors Name Description RealFirFilter(Single[], IppAlgType) Properties Name Description Format Taps Gets or sets the filter taps. Methods Name Description Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Initialize(ISampleStream) Read(Single[], Int32, Int32) Events Name Description SamplesAvailable"
  },
  "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.Initialize.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.Initialize.html",
    "title": "Method Initialize | Ham Cockpit",
    "keywords": "Method Initialize View Source Initialize(ISampleStream) Declaration public void Initialize(ISampleStream source) Parameters Type Name Description ISampleStream source Implements IInitSampleStream.Initialize(ISampleStream)"
  },
  "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.Read.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.Read.html",
    "title": "Method Read | Ham Cockpit",
    "keywords": "Method Read View Source Read(Single[], Int32, Int32) Declaration public int Read(float[] buffer, int offset, int count) Parameters Type Name Description Single [] buffer Int32 offset Int32 count Returns Type Description Int32 Implements ISampleStream.Read(Single[], Int32, Int32)"
  },
  "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.SamplesAvailable.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.SamplesAvailable.html",
    "title": "Event SamplesAvailable | Ham Cockpit",
    "keywords": "Event SamplesAvailable Implements SamplesAvailable Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public event EventHandler<SamplesAvailableEventArgs> SamplesAvailable Returns Type Description EventHandler < SamplesAvailableEventArgs >"
  },
  "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.Taps.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RealFirFilter.Taps.html",
    "title": "Property Taps | Ham Cockpit",
    "keywords": "Property Taps View Source Taps Gets or sets the filter taps. Declaration public float[] Taps { get; set; } Property Value Type Description Single [] The filter taps."
  },
  "api/VE3NEA.HamCockpit.DspFun.Resampler.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Resampler.-ctor.html",
    "title": "Constructor Resampler | Ham Cockpit",
    "keywords": "Constructor Resampler View Source Resampler(Int32) Declaration public Resampler(int outputSamplingRate) Parameters Type Name Description Int32 outputSamplingRate View Source Resampler(Int32, Int32) Declaration public Resampler(int outputSamplingRate, int quality) Parameters Type Name Description Int32 outputSamplingRate Int32 quality"
  },
  "api/VE3NEA.HamCockpit.DspFun.Resampler.Dispose.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Resampler.Dispose.html",
    "title": "Method Dispose | Ham Cockpit",
    "keywords": "Method Dispose View Source Dispose() Declaration public void Dispose() Implements IDisposable.Dispose()"
  },
  "api/VE3NEA.HamCockpit.DspFun.Resampler.Format.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Resampler.Format.html",
    "title": "Property Format | Ham Cockpit",
    "keywords": "Property Format View Source Format Declaration public SignalFormat Format { get; } Property Value Type Description SignalFormat Implements ISampleStream.Format"
  },
  "api/VE3NEA.HamCockpit.DspFun.Resampler.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Resampler.html",
    "title": "Class Resampler | Ham Cockpit",
    "keywords": "Class Resampler Inheritance Object Resampler Implements IIqProcessor IInitSampleStream ISampleStream IDisposable Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class Resampler : IIqProcessor, IInitSampleStream, ISampleStream, IDisposable Constructors Name Description Resampler(Int32) Resampler(Int32, Int32) Properties Name Description Format Methods Name Description Dispose() Initialize(ISampleStream) Read(Single[], Int32, Int32) Events Name Description SamplesAvailable"
  },
  "api/VE3NEA.HamCockpit.DspFun.Resampler.Initialize.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Resampler.Initialize.html",
    "title": "Method Initialize | Ham Cockpit",
    "keywords": "Method Initialize View Source Initialize(ISampleStream) Declaration public void Initialize(ISampleStream source) Parameters Type Name Description ISampleStream source Implements IInitSampleStream.Initialize(ISampleStream)"
  },
  "api/VE3NEA.HamCockpit.DspFun.Resampler.Read.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Resampler.Read.html",
    "title": "Method Read | Ham Cockpit",
    "keywords": "Method Read View Source Read(Single[], Int32, Int32) Declaration public int Read(float[] buffer, int offset, int count) Parameters Type Name Description Single [] buffer Int32 offset Int32 count Returns Type Description Int32 Implements ISampleStream.Read(Single[], Int32, Int32)"
  },
  "api/VE3NEA.HamCockpit.DspFun.Resampler.SamplesAvailable.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.Resampler.SamplesAvailable.html",
    "title": "Event SamplesAvailable | Ham Cockpit",
    "keywords": "Event SamplesAvailable Implements SamplesAvailable Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public event EventHandler<SamplesAvailableEventArgs> SamplesAvailable Returns Type Description EventHandler < SamplesAvailableEventArgs >"
  },
  "api/VE3NEA.HamCockpit.DspFun.RigStatus.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RigStatus.html",
    "title": "Enum RigStatus | Ham Cockpit",
    "keywords": "Enum RigStatus The status of the CAT connection to the radio. Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public enum RigStatus Fields Name Description Disabled The CAT interface is disabled. NotConfigured OmniRig is not configured. NotInstalled OmniRig is not installed. NotResponding The radio is not responding. Online CAT interface OK. PortBusy The COM port is used by another program."
  },
  "api/VE3NEA.HamCockpit.DspFun.RingBuffer.Count.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RingBuffer.Count.html",
    "title": "Property Count | Ham Cockpit",
    "keywords": "Property Count View Source Count Declaration public int Count { get; } Property Value Type Description Int32"
  },
  "api/VE3NEA.HamCockpit.DspFun.RingBuffer.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RingBuffer.-ctor.html",
    "title": "Constructor RingBuffer | Ham Cockpit",
    "keywords": "Constructor RingBuffer View Source RingBuffer(Int32) Declaration public RingBuffer(int capacity) Parameters Type Name Description Int32 capacity"
  },
  "api/VE3NEA.HamCockpit.DspFun.RingBuffer.Dump.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RingBuffer.Dump.html",
    "title": "Method Dump | Ham Cockpit",
    "keywords": "Method Dump View Source Dump(Int32) Declaration public void Dump(int count) Parameters Type Name Description Int32 count"
  },
  "api/VE3NEA.HamCockpit.DspFun.RingBuffer.FillWithZeros.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RingBuffer.FillWithZeros.html",
    "title": "Property FillWithZeros | Ham Cockpit",
    "keywords": "Property FillWithZeros View Source FillWithZeros Declaration public bool FillWithZeros { get; set; } Property Value Type Description Boolean"
  },
  "api/VE3NEA.HamCockpit.DspFun.RingBuffer.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RingBuffer.html",
    "title": "Class RingBuffer | Ham Cockpit",
    "keywords": "Class RingBuffer Inheritance Object RingBuffer Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class RingBuffer Constructors Name Description RingBuffer(Int32) Properties Name Description Count FillWithZeros Methods Name Description Dump(Int32) Read(Single[], Int32, Int32) Resize(Int32) Write(Single[], Int32, Int32) WriteInt16(Byte[], Int32) WriteStrided(Single[], Int32, Int32, SignalFormat) Events Name Description SamplesAvailable"
  },
  "api/VE3NEA.HamCockpit.DspFun.RingBuffer.Read.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RingBuffer.Read.html",
    "title": "Method Read | Ham Cockpit",
    "keywords": "Method Read View Source Read(Single[], Int32, Int32) Declaration public int Read(float[] buffer, int offset, int count) Parameters Type Name Description Single [] buffer Int32 offset Int32 count Returns Type Description Int32"
  },
  "api/VE3NEA.HamCockpit.DspFun.RingBuffer.Resize.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RingBuffer.Resize.html",
    "title": "Method Resize | Ham Cockpit",
    "keywords": "Method Resize View Source Resize(Int32) Declaration public void Resize(int capacity) Parameters Type Name Description Int32 capacity"
  },
  "api/VE3NEA.HamCockpit.DspFun.RingBuffer.SamplesAvailable.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RingBuffer.SamplesAvailable.html",
    "title": "Event SamplesAvailable | Ham Cockpit",
    "keywords": "Event SamplesAvailable Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public event EventHandler<SamplesAvailableEventArgs> SamplesAvailable Returns Type Description EventHandler < SamplesAvailableEventArgs >"
  },
  "api/VE3NEA.HamCockpit.DspFun.RingBuffer.Write.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RingBuffer.Write.html",
    "title": "Method Write | Ham Cockpit",
    "keywords": "Method Write View Source Write(Single[], Int32, Int32) Declaration public void Write(float[] buffer, int offset, int count) Parameters Type Name Description Single [] buffer Int32 offset Int32 count"
  },
  "api/VE3NEA.HamCockpit.DspFun.RingBuffer.WriteInt16.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RingBuffer.WriteInt16.html",
    "title": "Method WriteInt16 | Ham Cockpit",
    "keywords": "Method WriteInt16 View Source WriteInt16(Byte[], Int32) Declaration public void WriteInt16(byte[] buffer, int byteCount) Parameters Type Name Description Byte [] buffer Int32 byteCount"
  },
  "api/VE3NEA.HamCockpit.DspFun.RingBuffer.WriteStrided.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.RingBuffer.WriteStrided.html",
    "title": "Method WriteStrided | Ham Cockpit",
    "keywords": "Method WriteStrided View Source WriteStrided(Single[], Int32, Int32, SignalFormat) Declaration public void WriteStrided(float[] data, int offset, int inFloatCount, SignalFormat format) Parameters Type Name Description Single [] data Int32 offset Int32 inFloatCount SignalFormat format"
  },
  "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.CanSeek.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.CanSeek.html",
    "title": "Property CanSeek | Ham Cockpit",
    "keywords": "Property CanSeek View Source CanSeek Declaration public bool CanSeek { get; } Property Value Type Description Boolean Implements CSCore.IAudioSource.CanSeek"
  },
  "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.-ctor.html",
    "title": "Constructor SampleSourceWrapper | Ham Cockpit",
    "keywords": "Constructor SampleSourceWrapper View Source SampleSourceWrapper(ISampleStream) Declaration public SampleSourceWrapper(ISampleStream source) Parameters Type Name Description ISampleStream source"
  },
  "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.Dispose.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.Dispose.html",
    "title": "Method Dispose | Ham Cockpit",
    "keywords": "Method Dispose View Source Dispose() Declaration public void Dispose() Implements IDisposable.Dispose()"
  },
  "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.html",
    "title": "Class SampleSourceWrapper | Ham Cockpit",
    "keywords": "Class SampleSourceWrapper Inheritance Object SampleSourceWrapper Implements CSCore.ISampleSource CSCore.IReadableAudioSource < Single > CSCore.IAudioSource IDisposable Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class SampleSourceWrapper : ISampleSource, IReadableAudioSource<float>, IAudioSource, IDisposable Constructors Name Description SampleSourceWrapper(ISampleStream) Properties Name Description CanSeek Length Position WaveFormat Methods Name Description Dispose() Read(Single[], Int32, Int32)"
  },
  "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.Length.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.Length.html",
    "title": "Property Length | Ham Cockpit",
    "keywords": "Property Length View Source Length Declaration public long Length { get; } Property Value Type Description Int64 Implements CSCore.IAudioSource.Length"
  },
  "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.Position.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.Position.html",
    "title": "Property Position | Ham Cockpit",
    "keywords": "Property Position View Source Position Declaration public long Position { get; set; } Property Value Type Description Int64 Implements CSCore.IAudioSource.Position"
  },
  "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.Read.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.Read.html",
    "title": "Method Read | Ham Cockpit",
    "keywords": "Method Read View Source Read(Single[], Int32, Int32) Declaration public int Read(float[] buffer, int offset, int count) Parameters Type Name Description Single [] buffer Int32 offset Int32 count Returns Type Description Int32 Implements CSCore.IReadableAudioSource<T>.Read(T[], System.Int32, System.Int32)"
  },
  "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.WaveFormat.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SampleSourceWrapper.WaveFormat.html",
    "title": "Property WaveFormat | Ham Cockpit",
    "keywords": "Property WaveFormat View Source WaveFormat Declaration public WaveFormat WaveFormat { get; } Property Value Type Description CSCore.WaveFormat Implements CSCore.IAudioSource.WaveFormat"
  },
  "api/VE3NEA.HamCockpit.DspFun.SidebandFlipper.Enabled.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SidebandFlipper.Enabled.html",
    "title": "Property Enabled | Ham Cockpit",
    "keywords": "Property Enabled View Source Enabled Declaration public bool Enabled { get; set; } Property Value Type Description Boolean"
  },
  "api/VE3NEA.HamCockpit.DspFun.SidebandFlipper.Format.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SidebandFlipper.Format.html",
    "title": "Property Format | Ham Cockpit",
    "keywords": "Property Format View Source Format Declaration public SignalFormat Format { get; } Property Value Type Description SignalFormat Implements ISampleStream.Format"
  },
  "api/VE3NEA.HamCockpit.DspFun.SidebandFlipper.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SidebandFlipper.html",
    "title": "Class SidebandFlipper | Ham Cockpit",
    "keywords": "Class SidebandFlipper Inheritance Object SidebandFlipper Implements IIqProcessor IInitSampleStream ISampleStream Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class SidebandFlipper : IIqProcessor, IInitSampleStream, ISampleStream Properties Name Description Enabled Format Methods Name Description Initialize(ISampleStream) Read(Single[], Int32, Int32) Events Name Description SamplesAvailable"
  },
  "api/VE3NEA.HamCockpit.DspFun.SidebandFlipper.Initialize.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SidebandFlipper.Initialize.html",
    "title": "Method Initialize | Ham Cockpit",
    "keywords": "Method Initialize View Source Initialize(ISampleStream) Declaration public void Initialize(ISampleStream source) Parameters Type Name Description ISampleStream source Implements IInitSampleStream.Initialize(ISampleStream)"
  },
  "api/VE3NEA.HamCockpit.DspFun.SidebandFlipper.Read.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SidebandFlipper.Read.html",
    "title": "Method Read | Ham Cockpit",
    "keywords": "Method Read View Source Read(Single[], Int32, Int32) Declaration public int Read(float[] buffer, int offset, int count) Parameters Type Name Description Single [] buffer Int32 offset Int32 count Returns Type Description Int32 Implements ISampleStream.Read(Single[], Int32, Int32)"
  },
  "api/VE3NEA.HamCockpit.DspFun.SidebandFlipper.SamplesAvailable.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SidebandFlipper.SamplesAvailable.html",
    "title": "Event SamplesAvailable | Ham Cockpit",
    "keywords": "Event SamplesAvailable Implements SamplesAvailable Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public event EventHandler<SamplesAvailableEventArgs> SamplesAvailable Returns Type Description EventHandler < SamplesAvailableEventArgs >"
  },
  "api/VE3NEA.HamCockpit.DspFun.SlidingMax.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SlidingMax.-ctor.html",
    "title": "Constructor SlidingMax | Ham Cockpit",
    "keywords": "Constructor SlidingMax View Source SlidingMax(Int32) Initializes a new instance of the SlidingMax class. Declaration public SlidingMax(int length) Parameters Type Name Description Int32 length The length of the sliding filter."
  },
  "api/VE3NEA.HamCockpit.DspFun.SlidingMax.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SlidingMax.html",
    "title": "Class SlidingMax | Ham Cockpit",
    "keywords": "Class SlidingMax Computes the sliding maximum of the input values. Inheritance Object BaseSlidingFilter SlidingMax Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class SlidingMax : BaseSlidingFilter Constructors Name Description SlidingMax(Int32) Initializes a new instance of the SlidingMax class. Methods Name Description MinOrMax(Single, Single) Returns the maximum of two values."
  },
  "api/VE3NEA.HamCockpit.DspFun.SlidingMax.MinOrMax.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SlidingMax.MinOrMax.html",
    "title": "Method MinOrMax | Ham Cockpit",
    "keywords": "Method MinOrMax View Source MinOrMax(Single, Single) Returns the maximum of two values. Declaration protected override float MinOrMax(float x, float y) Parameters Type Name Description Single x The first value. Single y The second value. Returns Type Description Single The maximum of two values. Overrides BaseSlidingFilter.MinOrMax(Single, Single)"
  },
  "api/VE3NEA.HamCockpit.DspFun.SlidingMin.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SlidingMin.-ctor.html",
    "title": "Constructor SlidingMin | Ham Cockpit",
    "keywords": "Constructor SlidingMin View Source SlidingMin(Int32) Initializes a new instance of the SlidingMin class. Declaration public SlidingMin(int length) Parameters Type Name Description Int32 length The length of the sliding filter."
  },
  "api/VE3NEA.HamCockpit.DspFun.SlidingMin.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SlidingMin.html",
    "title": "Class SlidingMin | Ham Cockpit",
    "keywords": "Class SlidingMin Computes the sliding minimum of the input values. Inheritance Object BaseSlidingFilter SlidingMin Namespace : VE3NEA.HamCockpit.DspFun Assembly : VE3NEA.HamCockpit.DspFun.dll Syntax public class SlidingMin : BaseSlidingFilter Constructors Name Description SlidingMin(Int32) Initializes a new instance of the SlidingMin class. Methods Name Description MinOrMax(Single, Single) Returns the minimum of two values."
  },
  "api/VE3NEA.HamCockpit.DspFun.SlidingMin.MinOrMax.html": {
    "href": "api/VE3NEA.HamCockpit.DspFun.SlidingMin.MinOrMax.html",
    "title": "Method MinOrMax | Ham Cockpit",
    "keywords": "Method MinOrMax View Source MinOrMax(Single, Single) Returns the minimum of two values. Declaration protected override float MinOrMax(float x, float y) Parameters Type Name Description Single x The first value. Single y The second value. Returns Type Description Single The minimum of two values. Overrides BaseSlidingFilter.MinOrMax(Single, Single) Remarks The child class overrides this method to return either the minimum or maximum."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.html",
    "title": "Namespace VE3NEA.HamCockpit.PluginAPI | Ham Cockpit",
    "keywords": "Namespace VE3NEA.HamCockpit.PluginAPI Classes SamplesAvailableEventArgs Event arguments class for the SamplesAvailable event SignalFormat Describes the format and characteristics of the signal samples in the data stream StoppedEventArgs Event arguments class for the Stopped event Interfaces IAudioOutput Represents a device that outputs audio data. IAudioProcessor Represents a plugin that processes audio signals. IBandpassFilter Represents a plugin that performs bandpass filtering of the audio signals. IBandPlan Represents a plugin that provides the band plan data. IBandSegment Represents a segment in the band plan IDebugWindow Represents a window used to output debug information. IDemodulator Represents a plugin that demodulates I/Q data to audio signals. IDspPipeline Represents the DspPipeline in the host application. IInitSampleStream Represents a sample stream that requires initialization. IIqProcessor Represents a plugin that processes I/Q data. IModeSwitch Represents a device or plugin that can change the modulation type. IPlugin The main interface implemented by all plugins. IPluginHost Represents the application that hosts the plugins. ISampleStream Represents a stream of floating point values and information how the values are grouped into samples. ISampleStreamTap Represents a tap into the DspPipeline . ISignalSource Represents a device that produces a stream of samples mapped to RF frequency ITransmitter Represents a transmitting device. ITuner Represents a device that can be tuned to an RF frequency. IVisualPlugin The interface implemented by the plugins that show one or more visual panels. Enums QsyDirection Direction of the frequency change. Sideband The sideband of the signal."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IAudioOutput.Active.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IAudioOutput.Active.html",
    "title": "Property Active | Ham Cockpit",
    "keywords": "Property Active View Source Active Gets or sets a value indicating whether this IAudioOutput is active. Declaration bool Active { get; set; } Property Value Type Description Boolean true if active; otherwise, false ."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IAudioOutput.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IAudioOutput.html",
    "title": "Interface IAudioOutput | Ham Cockpit",
    "keywords": "Interface IAudioOutput Represents a device that outputs audio data. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface IAudioOutput Properties Name Description Active Gets or sets a value indicating whether this IAudioOutput is active. Mute Gets or sets a value indicating whether this IAudioOutput is muted. Methods Name Description Initialize(ISampleStream) Initializes the specified audio output device."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IAudioOutput.Initialize.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IAudioOutput.Initialize.html",
    "title": "Method Initialize | Ham Cockpit",
    "keywords": "Method Initialize View Source Initialize(ISampleStream) Initializes the specified audio output device. Declaration void Initialize(ISampleStream audioSignal) Parameters Type Name Description ISampleStream audioSignal The audio signal that will be sent to the device.."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IAudioOutput.Mute.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IAudioOutput.Mute.html",
    "title": "Property Mute | Ham Cockpit",
    "keywords": "Property Mute View Source Mute Gets or sets a value indicating whether this IAudioOutput is muted. Declaration bool Mute { get; set; } Property Value Type Description Boolean true if muted; otherwise, false ."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IAudioProcessor.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IAudioProcessor.html",
    "title": "Interface IAudioProcessor | Ham Cockpit",
    "keywords": "Interface IAudioProcessor Represents a plugin that processes audio signals. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface IAudioProcessor : IInitSampleStream, ISampleStream"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandpassFilter.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandpassFilter.html",
    "title": "Interface IBandpassFilter | Ham Cockpit",
    "keywords": "Interface IBandpassFilter Represents a plugin that performs bandpass filtering of the audio signals. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface IBandpassFilter Methods Name Description SetBandwidth(Int32) Sets the filter bandwidth. SetPassband(Int32, Int32) Sets the passband of the filter. Events Name Description PassbandChanged Occurs when the filter passband changes."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandpassFilter.PassbandChanged.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandpassFilter.PassbandChanged.html",
    "title": "Event PassbandChanged | Ham Cockpit",
    "keywords": "Event PassbandChanged Occurs when the filter passband changes. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax event EventHandler<EventArgs> PassbandChanged Returns Type Description EventHandler < EventArgs >"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandpassFilter.SetBandwidth.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandpassFilter.SetBandwidth.html",
    "title": "Method SetBandwidth | Ham Cockpit",
    "keywords": "Method SetBandwidth View Source SetBandwidth(Int32) Sets the filter bandwidth. Declaration void SetBandwidth(int bandwidth) Parameters Type Name Description Int32 bandwidth The bandwidth of the filter in Hertz."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandpassFilter.SetPassband.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandpassFilter.SetPassband.html",
    "title": "Method SetPassband | Ham Cockpit",
    "keywords": "Method SetPassband View Source SetPassband(Int32, Int32) Sets the passband of the filter. Declaration void SetPassband(int passbandLow, int passbandHigh) Parameters Type Name Description Int32 passbandLow The lower cutoff frequency of the filter passband in Hertz. Int32 passbandHigh The upper cutoff frequency of the filter passband in Hertz/"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandPlan.BandPlanChanged.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandPlan.BandPlanChanged.html",
    "title": "Event BandPlanChanged | Ham Cockpit",
    "keywords": "Event BandPlanChanged Occurs when the user selects a different band plan. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax event EventHandler BandPlanChanged Returns Type Description EventHandler"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandPlan.GetBandStart.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandPlan.GetBandStart.html",
    "title": "Method GetBandStart | Ham Cockpit",
    "keywords": "Method GetBandStart View Source GetBandStart(Int64, String, QsyDirection) Gets the start frequency for the given mode on the current, next-upper or next-lower band. Declaration long GetBandStart(long frequency, string mode, QsyDirection qsyDirection) Parameters Type Name Description Int64 frequency The frequency in Hertz. String mode The mode. QsyDirection qsyDirection The QSY direction. Returns Type Description Int64 The start frequency in Hertz. Remarks This method may be used, in particular, for band switching."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandPlan.GetSegment.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandPlan.GetSegment.html",
    "title": "Method GetSegment | Ham Cockpit",
    "keywords": "Method GetSegment View Source GetSegment(Int64, QsyDirection) Gets the current or next/previous band segment given the frequency. Declaration IBandSegment GetSegment(long frequency, QsyDirection qsyDirection) Parameters Type Name Description Int64 frequency The frequency in Hertz. QsyDirection qsyDirection The QSY direction. Returns Type Description IBandSegment The band segment. Remarks This method may be used, in particular, to find out the band and mode of a cluster spot, or to jump to the next or previous band segment."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandPlan.GetSegments.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandPlan.GetSegments.html",
    "title": "Method GetSegments | Ham Cockpit",
    "keywords": "Method GetSegments View Source GetSegments(Int64, Int64) Gets all band segments in the given range of frequencies. Declaration IBandSegment[] GetSegments(long startFrequency, long endFrequency) Parameters Type Name Description Int64 startFrequency The start frequency in Hertz. Int64 endFrequency The end frequency in Hertz. Returns Type Description IBandSegment [] The band segments. Remarks This method may be used, in particular, to draw segments on a band map."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandPlan.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandPlan.html",
    "title": "Interface IBandPlan | Ham Cockpit",
    "keywords": "Interface IBandPlan Represents a plugin that provides the band plan data. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface IBandPlan Methods Name Description GetBandStart(Int64, String, QsyDirection) Gets the start frequency for the given mode on the current, next-upper or next-lower band. GetSegment(Int64, QsyDirection) Gets the current or next/previous band segment given the frequency. GetSegments(Int64, Int64) Gets all band segments in the given range of frequencies. Events Name Description BandPlanChanged Occurs when the user selects a different band plan."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.BackColor.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.BackColor.html",
    "title": "Property BackColor | Ham Cockpit",
    "keywords": "Property BackColor View Source BackColor Gets the color of the segment background. Declaration Color BackColor { get; } Property Value Type Description Color The color of the segment background."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.Band.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.Band.html",
    "title": "Property Band | Ham Cockpit",
    "keywords": "Property Band View Source Band Gets the band. Declaration string Band { get; } Property Value Type Description String The band name, preferably as defined in the ADIF format."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.DefaultFrequency.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.DefaultFrequency.html",
    "title": "Property DefaultFrequency | Ham Cockpit",
    "keywords": "Property DefaultFrequency View Source DefaultFrequency Gets the default frequency. Declaration long DefaultFrequency { get; } Property Value Type Description Int64 The default frequency in Hertz. Remarks When changing the bands, the radio will be initially tuned to this frequency. If not specified, defaults to StartFrequency ."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.EndFrequency.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.EndFrequency.html",
    "title": "Property EndFrequency | Ham Cockpit",
    "keywords": "Property EndFrequency View Source EndFrequency Gets the end frequency. Declaration long EndFrequency { get; } Property Value Type Description Int64 The end frequency in Hertz."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.html",
    "title": "Interface IBandSegment | Ham Cockpit",
    "keywords": "Interface IBandSegment Represents a segment in the band plan Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface IBandSegment Properties Name Description BackColor Gets the color of the segment background. Band Gets the band. DefaultFrequency Gets the default frequency. EndFrequency Gets the end frequency. MainSegment Gets a value indicating whether the segment is the main segment. PrimaryMode Gets the primary mode. Remark Gets the remark text. StartFrequency Gets the start frequency. ValidModes Gets the valid modes. See Also IBandPlan"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.MainSegment.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.MainSegment.html",
    "title": "Property MainSegment | Ham Cockpit",
    "keywords": "Property MainSegment View Source MainSegment Gets a value indicating whether the segment is the main segment. Declaration bool MainSegment { get; } Property Value Type Description Boolean true if main segment; otherwise, false . Remarks On some bands, there is more than one segment used for a particular mode. For example, the 14074-14078 kHz and 14095-14099 kHz segments are used for FT8 on the 20m band.One of these segments must be marked as main."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.PrimaryMode.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.PrimaryMode.html",
    "title": "Property PrimaryMode | Ham Cockpit",
    "keywords": "Property PrimaryMode View Source PrimaryMode Gets the primary mode. Declaration string PrimaryMode { get; } Property Value Type Description String The primary mode in the band segment. Remarks This property may be used, in particular, to determine the mode of a cluster spot from its frequency."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.Remark.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.Remark.html",
    "title": "Property Remark | Ham Cockpit",
    "keywords": "Property Remark View Source Remark Gets the remark text. Declaration string Remark { get; } Property Value Type Description String The remark text. Remarks Remark is an optional string that will be appended to the segment label when information about the segment is displayed. For example, \"F/H\" is a remark in the 14095-14099 kHz segment because this segment is used for the Fox-and-Hound style QSO. The mouse tooltip on the band map is a combination of the band, mode and remark: \"20M FT8 (F/H)\"."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.StartFrequency.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.StartFrequency.html",
    "title": "Property StartFrequency | Ham Cockpit",
    "keywords": "Property StartFrequency View Source StartFrequency Gets the start frequency. Declaration long StartFrequency { get; } Property Value Type Description Int64 The start frequency in Hertz."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.ValidModes.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IBandSegment.ValidModes.html",
    "title": "Property ValidModes | Ham Cockpit",
    "keywords": "Property ValidModes View Source ValidModes Gets the valid modes. Declaration string[] ValidModes { get; } Property Value Type Description String [] The modes that are valid in the segment. Remarks This property may be used, in particular, by the skimmer plugins to determine where to decode a particular mode. If not specified, assumed to include only the primary mode."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IDebugWindow.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IDebugWindow.html",
    "title": "Interface IDebugWindow | Ham Cockpit",
    "keywords": "Interface IDebugWindow Represents a window used to output debug information. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface IDebugWindow Properties Name Description LabelText Sets the label text in the debug window. Methods Name Description LogMessage(String) Adds a message to the debug window."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IDebugWindow.LabelText.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IDebugWindow.LabelText.html",
    "title": "Property LabelText | Ham Cockpit",
    "keywords": "Property LabelText View Source LabelText Sets the label text in the debug window. Declaration string LabelText { set; } Property Value Type Description String The label text."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IDebugWindow.LogMessage.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IDebugWindow.LogMessage.html",
    "title": "Method LogMessage | Ham Cockpit",
    "keywords": "Method LogMessage View Source LogMessage(String) Adds a message to the debug window. Declaration void LogMessage(string message) Parameters Type Name Description String message The message."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IDemodulator.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IDemodulator.html",
    "title": "Interface IDemodulator | Ham Cockpit",
    "keywords": "Interface IDemodulator Represents a plugin that demodulates I/Q data to audio signals. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface IDemodulator : IInitSampleStream, ISampleStream, IModeSwitch"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.Active.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.Active.html",
    "title": "Property Active | Ham Cockpit",
    "keywords": "Property Active View Source Active Gets a value indicating whether this IDspPipeline is active. Declaration bool Active { get; } Property Value Type Description Boolean true if active; otherwise, false ."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.DemodulatedAudio.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.DemodulatedAudio.html",
    "title": "Property DemodulatedAudio | Ham Cockpit",
    "keywords": "Property DemodulatedAudio View Source DemodulatedAudio Gets the demodulated audio stream. Declaration ISampleStreamTap DemodulatedAudio { get; } Property Value Type Description ISampleStreamTap The demodulated audio stream."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.html",
    "title": "Interface IDspPipeline | Ham Cockpit",
    "keywords": "Interface IDspPipeline Represents the DspPipeline in the host application. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface IDspPipeline Properties Name Description Active Gets a value indicating whether this IDspPipeline is active. DemodulatedAudio Gets the demodulated audio stream. InputSignal Gets the input I/Q or audio stream. ModeSwitch Gets the mode switch. ProcessedAudio Gets the processed audio stream. ProcessedSignal Gets the processed I/Q signal stream. Transmitter Gets the transmitter. Tuner Gets the RX frequency tuner. Events Name Description StatusChanged Occurs when the Active status changes."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.InputSignal.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.InputSignal.html",
    "title": "Property InputSignal | Ham Cockpit",
    "keywords": "Property InputSignal View Source InputSignal Gets the input I/Q or audio stream. Declaration ISampleStreamTap InputSignal { get; } Property Value Type Description ISampleStreamTap The input I/Q or audio stream."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.ModeSwitch.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.ModeSwitch.html",
    "title": "Property ModeSwitch | Ham Cockpit",
    "keywords": "Property ModeSwitch View Source ModeSwitch Gets the mode switch. Declaration IModeSwitch ModeSwitch { get; } Property Value Type Description IModeSwitch The mode switch."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.ProcessedAudio.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.ProcessedAudio.html",
    "title": "Property ProcessedAudio | Ham Cockpit",
    "keywords": "Property ProcessedAudio View Source ProcessedAudio Gets the processed audio stream. Declaration ISampleStreamTap ProcessedAudio { get; } Property Value Type Description ISampleStreamTap The processed audio stream."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.ProcessedSignal.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.ProcessedSignal.html",
    "title": "Property ProcessedSignal | Ham Cockpit",
    "keywords": "Property ProcessedSignal View Source ProcessedSignal Gets the processed I/Q signal stream. Declaration ISampleStreamTap ProcessedSignal { get; } Property Value Type Description ISampleStreamTap The processed I/Q signal stream."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.StatusChanged.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.StatusChanged.html",
    "title": "Event StatusChanged | Ham Cockpit",
    "keywords": "Event StatusChanged Occurs when the Active status changes. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax event EventHandler StatusChanged Returns Type Description EventHandler"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.Transmitter.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.Transmitter.html",
    "title": "Property Transmitter | Ham Cockpit",
    "keywords": "Property Transmitter View Source Transmitter Gets the transmitter. Declaration ITransmitter Transmitter { get; } Property Value Type Description ITransmitter The transmitter."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.Tuner.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IDspPipeline.Tuner.html",
    "title": "Property Tuner | Ham Cockpit",
    "keywords": "Property Tuner View Source Tuner Gets the RX frequency tuner. Declaration ITuner Tuner { get; } Property Value Type Description ITuner The RX frequency tuner."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IInitSampleStream.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IInitSampleStream.html",
    "title": "Interface IInitSampleStream | Ham Cockpit",
    "keywords": "Interface IInitSampleStream Represents a sample stream that requires initialization. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface IInitSampleStream : ISampleStream Methods Name Description Initialize(ISampleStream) Initializes the sample stream."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IInitSampleStream.Initialize.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IInitSampleStream.Initialize.html",
    "title": "Method Initialize | Ham Cockpit",
    "keywords": "Method Initialize View Source Initialize(ISampleStream) Initializes the sample stream. Declaration void Initialize(ISampleStream source) Parameters Type Name Description ISampleStream source The source sample stream."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IIqProcessor.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IIqProcessor.html",
    "title": "Interface IIqProcessor | Ham Cockpit",
    "keywords": "Interface IIqProcessor Represents a plugin that processes I/Q data. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface IIqProcessor : IInitSampleStream, ISampleStream"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IModeSwitch.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IModeSwitch.html",
    "title": "Interface IModeSwitch | Ham Cockpit",
    "keywords": "Interface IModeSwitch Represents a device or plugin that can change the modulation type. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface IModeSwitch Properties Name Description Mode Gets or sets the signal mode. Sideband Gets or sets the signal sideband. Events Name Description ModeChanged Occurs when the signal mode or sideband changes."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IModeSwitch.Mode.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IModeSwitch.Mode.html",
    "title": "Property Mode | Ham Cockpit",
    "keywords": "Property Mode View Source Mode Gets or sets the signal mode. Declaration string Mode { get; set; } Property Value Type Description String The mode."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IModeSwitch.ModeChanged.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IModeSwitch.ModeChanged.html",
    "title": "Event ModeChanged | Ham Cockpit",
    "keywords": "Event ModeChanged Occurs when the signal mode or sideband changes. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax event EventHandler ModeChanged Returns Type Description EventHandler"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IModeSwitch.Sideband.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IModeSwitch.Sideband.html",
    "title": "Property Sideband | Ham Cockpit",
    "keywords": "Property Sideband View Source Sideband Gets or sets the signal sideband. Declaration Sideband Sideband { get; set; } Property Value Type Description Sideband The sideband."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IPlugin.Author.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IPlugin.Author.html",
    "title": "Property Author | Ham Cockpit",
    "keywords": "Property Author View Source Author Gets the author's ID. Declaration string Author { get; } Property Value Type Description String The author's ID. Remarks A unique identifier of the plugin author. A licensed radio amateur should use his callsign as identifier."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IPlugin.Enabled.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IPlugin.Enabled.html",
    "title": "Property Enabled | Ham Cockpit",
    "keywords": "Property Enabled View Source Enabled Gets or sets a value indicating whether this IPlugin is enabled by the user. Declaration bool Enabled { get; set; } Property Value Type Description Boolean true if enabled; otherwise, false ."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IPlugin.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IPlugin.html",
    "title": "Interface IPlugin | Ham Cockpit",
    "keywords": "Interface IPlugin The main interface implemented by all plugins. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface IPlugin Properties Name Description Author Gets the author's ID. Enabled Gets or sets a value indicating whether this IPlugin is enabled by the user. Name Gets the plugin name. Settings Gets or sets the settings object. StatusItem Gets the status toolstrip item. ToolStrip Gets the toolstrip object."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IPlugin.Name.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IPlugin.Name.html",
    "title": "Property Name | Ham Cockpit",
    "keywords": "Property Name View Source Name Gets the plugin name. Declaration string Name { get; } Property Value Type Description String The plugin name. Remarks This is the name that will appear in the Plugin Settings dialog, and in the View menu if the plugin has a visible panel."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IPlugin.Settings.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IPlugin.Settings.html",
    "title": "Property Settings | Ham Cockpit",
    "keywords": "Property Settings View Source Settings Gets or sets the settings object. Declaration object Settings { get; set; } Property Value Type Description Object The plugin settings object. Remarks The plugin can use this object to store its settings. The host application saves the Settings object of each plugin on exit and reloads it on the next program start. The properties of the object appear in the Plugin Settings dialog and are editable by the user."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IPlugin.StatusItem.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IPlugin.StatusItem.html",
    "title": "Property StatusItem | Ham Cockpit",
    "keywords": "Property StatusItem View Source StatusItem Gets the status toolstrip item. Declaration ToolStripItem StatusItem { get; } Property Value Type Description ToolStripItem The toolstrip item that will appear on the application's status bar."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IPlugin.ToolStrip.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IPlugin.ToolStrip.html",
    "title": "Property ToolStrip | Ham Cockpit",
    "keywords": "Property ToolStrip View Source ToolStrip Gets the toolstrip object. Declaration ToolStrip ToolStrip { get; } Property Value Type Description ToolStrip The toolstrip that will appear on the application's toolbar."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IPluginHost.BackColor.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IPluginHost.BackColor.html",
    "title": "Property BackColor | Ham Cockpit",
    "keywords": "Property BackColor View Source BackColor Gets the color of the background. Declaration Color BackColor { get; } Property Value Type Description Color The color of the background."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IPluginHost.DspPipeline.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IPluginHost.DspPipeline.html",
    "title": "Property DspPipeline | Ham Cockpit",
    "keywords": "Property DspPipeline View Source DspPipeline Gets the DSP pipeline. Declaration IDspPipeline DspPipeline { get; } Property Value Type Description IDspPipeline The DSP pipeline."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IPluginHost.GetReferenceDataFolder.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IPluginHost.GetReferenceDataFolder.html",
    "title": "Method GetReferenceDataFolder | Ham Cockpit",
    "keywords": "Method GetReferenceDataFolder View Source GetReferenceDataFolder(String) Gets the reference data folder. Declaration string GetReferenceDataFolder(string author) Parameters Type Name Description String author The author ID. Returns Type Description String The folder where the program stores reference data."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IPluginHost.GetUserDataFolder.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IPluginHost.GetUserDataFolder.html",
    "title": "Method GetUserDataFolder | Ham Cockpit",
    "keywords": "Method GetUserDataFolder View Source GetUserDataFolder(String) Gets the user data folder. Declaration string GetUserDataFolder(string author) Parameters Type Name Description String author The author ID. Returns Type Description String The folder where the program stores user-specific data."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IPluginHost.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IPluginHost.html",
    "title": "Interface IPluginHost | Ham Cockpit",
    "keywords": "Interface IPluginHost Represents the application that hosts the plugins. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface IPluginHost Properties Name Description BackColor Gets the color of the background. DspPipeline Gets the DSP pipeline. Methods Name Description GetReferenceDataFolder(String) Gets the reference data folder. GetUserDataFolder(String) Gets the user data folder."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ISampleStream.Format.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ISampleStream.Format.html",
    "title": "Property Format | Ham Cockpit",
    "keywords": "Property Format View Source Format Gets the format. Declaration SignalFormat Format { get; } Property Value Type Description SignalFormat The format of the data in the stream."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ISampleStream.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ISampleStream.html",
    "title": "Interface ISampleStream | Ham Cockpit",
    "keywords": "Interface ISampleStream Represents a stream of floating point values and information how the values are grouped into samples. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface ISampleStream Properties Name Description Format Gets the format. Methods Name Description Read(Single[], Int32, Int32) Reads the specified buffer. Events Name Description SamplesAvailable Occurs when the stream has data samples available."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ISampleStream.Read.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ISampleStream.Read.html",
    "title": "Method Read | Ham Cockpit",
    "keywords": "Method Read View Source Read(Single[], Int32, Int32) Reads the specified buffer. Declaration int Read(float[] buffer, int offset, int count) Parameters Type Name Description Single [] buffer The buffer. Int32 offset The offset if the first value to read. Int32 count The number of values to read. Returns Type Description Int32 The number of values read."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ISampleStream.SamplesAvailable.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ISampleStream.SamplesAvailable.html",
    "title": "Event SamplesAvailable | Ham Cockpit",
    "keywords": "Event SamplesAvailable Occurs when the stream has data samples available. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax event EventHandler<SamplesAvailableEventArgs> SamplesAvailable Returns Type Description EventHandler < SamplesAvailableEventArgs >"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ISampleStreamTap.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ISampleStreamTap.html",
    "title": "Interface ISampleStreamTap | Ham Cockpit",
    "keywords": "Interface ISampleStreamTap Represents a tap into the DspPipeline . Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface ISampleStreamTap : ISampleStream Properties Name Description IsAvailable Gets a value indicating whether the signal at this tap is available."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ISampleStreamTap.IsAvailable.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ISampleStreamTap.IsAvailable.html",
    "title": "Property IsAvailable | Ham Cockpit",
    "keywords": "Property IsAvailable View Source IsAvailable Gets a value indicating whether the signal at this tap is available. Declaration bool IsAvailable { get; } Property Value Type Description Boolean true if the signal is available; otherwise, false ."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ISignalSource.Active.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ISignalSource.Active.html",
    "title": "Property Active | Ham Cockpit",
    "keywords": "Property Active View Source Active Gets or sets a value indicating whether this ISignalSource is active. Declaration bool Active { get; set; } Property Value Type Description Boolean true if active; otherwise, false ."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ISignalSource.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ISignalSource.html",
    "title": "Interface ISignalSource | Ham Cockpit",
    "keywords": "Interface ISignalSource Represents a device that produces a stream of samples mapped to RF frequency Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface ISignalSource : ISampleStream, ITuner Properties Name Description Active Gets or sets a value indicating whether this ISignalSource is active. Methods Name Description Initialize() Initializes this instance. Events Name Description Stopped Occurs when the signal source is no longer able to provide signal data."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ISignalSource.Initialize.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ISignalSource.Initialize.html",
    "title": "Method Initialize | Ham Cockpit",
    "keywords": "Method Initialize View Source Initialize() Initializes this instance. Declaration void Initialize()"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ISignalSource.Stopped.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ISignalSource.Stopped.html",
    "title": "Event Stopped | Ham Cockpit",
    "keywords": "Event Stopped Occurs when the signal source is no longer able to provide signal data. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax event EventHandler<StoppedEventArgs> Stopped Returns Type Description EventHandler < StoppedEventArgs > Remarks This event should be fired when the device stops working for one reason or another, e.g., it is turned off, its cable is disconnected, etc. The application uses this event to stop the DspPipeline and display an error message."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.Active.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.Active.html",
    "title": "Property Active | Ham Cockpit",
    "keywords": "Property Active View Source Active Gets or sets a value indicating whether this ITransmitter is active. Declaration bool Active { get; set; } Property Value Type Description Boolean true if active; otherwise, false ."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.Frequency.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.Frequency.html",
    "title": "Property Frequency | Ham Cockpit",
    "keywords": "Property Frequency View Source Frequency Gets or sets the transmitter frequency. Declaration long Frequency { get; set; } Property Value Type Description Int64 The transmitter frequency in Hertz."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.html",
    "title": "Interface ITransmitter | Ham Cockpit",
    "keywords": "Interface ITransmitter Represents a transmitting device. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface ITransmitter : IModeSwitch Properties Name Description Active Gets or sets a value indicating whether this ITransmitter is active. Frequency Gets or sets the transmitter frequency. Split Gets or sets a value indicating whether this ITransmitter is in the Split mode. Transmit Gets or sets a value indicating whether this ITransmitter is in the transmit mode. Methods Name Description IsTransceiver() Determines whether the transmitter is a transceiver. Events Name Description SettingsChanged Occurs when the settings of the transmitter change. Stopped Occurs when the transmitter stops working. Tuned Occurs when the transmit frequency changes."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.IsTransceiver.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.IsTransceiver.html",
    "title": "Method IsTransceiver | Ham Cockpit",
    "keywords": "Method IsTransceiver View Source IsTransceiver() Determines whether the transmitter is a transceiver. Declaration bool IsTransceiver() Returns Type Description Boolean true if this transmitter is a transceiver; otherwise, false . Remarks This function must return true if the same radio is currently used for receiving and transmitting, and its transmit frequency follows receiver's dial frequency in the simplex mode; otherwise false ."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.SettingsChanged.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.SettingsChanged.html",
    "title": "Event SettingsChanged | Ham Cockpit",
    "keywords": "Event SettingsChanged Occurs when the settings of the transmitter change. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax event EventHandler SettingsChanged Returns Type Description EventHandler"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.Split.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.Split.html",
    "title": "Property Split | Ham Cockpit",
    "keywords": "Property Split View Source Split Gets or sets a value indicating whether this ITransmitter is in the Split mode. Declaration bool Split { get; set; } Property Value Type Description Boolean true if the transmitter is in the Split mode; otherwise, false ."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.Stopped.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.Stopped.html",
    "title": "Event Stopped | Ham Cockpit",
    "keywords": "Event Stopped Occurs when the transmitter stops working. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax event EventHandler<StoppedEventArgs> Stopped Returns Type Description EventHandler < StoppedEventArgs > Remarks This event should be fired when the radio stops working for one reason or another, e.g., it is turned off, its cable is disconnected, etc. The application uses this event to stop the DspPipeline and display an error message."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.Transmit.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.Transmit.html",
    "title": "Property Transmit | Ham Cockpit",
    "keywords": "Property Transmit View Source Transmit Gets or sets a value indicating whether this ITransmitter is in the transmit mode. Declaration bool Transmit { get; set; } Property Value Type Description Boolean true if the transmitter in the transmit mode; otherwise, false ."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.Tuned.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ITransmitter.Tuned.html",
    "title": "Event Tuned | Ham Cockpit",
    "keywords": "Event Tuned Occurs when the transmit frequency changes. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax event EventHandler Tuned Returns Type Description EventHandler"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ITuner.GetDialFrequency.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ITuner.GetDialFrequency.html",
    "title": "Method GetDialFrequency | Ham Cockpit",
    "keywords": "Method GetDialFrequency View Source GetDialFrequency(Int32) Gets the dial frequency. Declaration long GetDialFrequency(int channel = 0) Parameters Type Name Description Int32 channel The channel id. Returns Type Description Int64 The dial frequency of the specified channel in Hertz."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ITuner.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ITuner.html",
    "title": "Interface ITuner | Ham Cockpit",
    "keywords": "Interface ITuner Represents a device that can be tuned to an RF frequency. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface ITuner Methods Name Description GetDialFrequency(Int32) Gets the dial frequency. SetDialFrequency(Int64, Int32) Sets the dial frequency of the specified channel. Events Name Description Tuned Occurs when the dial frequency changes."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ITuner.SetDialFrequency.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ITuner.SetDialFrequency.html",
    "title": "Method SetDialFrequency | Ham Cockpit",
    "keywords": "Method SetDialFrequency View Source SetDialFrequency(Int64, Int32) Sets the dial frequency of the specified channel. Declaration void SetDialFrequency(long frequency, int channel = 0) Parameters Type Name Description Int64 frequency The dial frequency in Hertz. Int32 channel The channel id."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.ITuner.Tuned.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.ITuner.Tuned.html",
    "title": "Event Tuned | Ham Cockpit",
    "keywords": "Event Tuned Occurs when the dial frequency changes. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax event EventHandler Tuned Returns Type Description EventHandler"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IVisualPlugin.CanCreatePanel.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IVisualPlugin.CanCreatePanel.html",
    "title": "Property CanCreatePanel | Ham Cockpit",
    "keywords": "Property CanCreatePanel View Source CanCreatePanel Gets a value indicating whether this instance can create a visual panel. Declaration bool CanCreatePanel { get; } Property Value Type Description Boolean true if the plugin can create a visual panel; otherwise, false ."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IVisualPlugin.CreatePanel.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IVisualPlugin.CreatePanel.html",
    "title": "Method CreatePanel | Ham Cockpit",
    "keywords": "Method CreatePanel View Source CreatePanel() Creates a visual panel. Declaration UserControl CreatePanel() Returns Type Description UserControl The panel object"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IVisualPlugin.DestroyPanel.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IVisualPlugin.DestroyPanel.html",
    "title": "Method DestroyPanel | Ham Cockpit",
    "keywords": "Method DestroyPanel View Source DestroyPanel(UserControl) Destroys the panel. Declaration void DestroyPanel(UserControl panel) Parameters Type Name Description UserControl panel The panel."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.IVisualPlugin.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.IVisualPlugin.html",
    "title": "Interface IVisualPlugin | Ham Cockpit",
    "keywords": "Interface IVisualPlugin The interface implemented by the plugins that show one or more visual panels. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public interface IVisualPlugin Properties Name Description CanCreatePanel Gets a value indicating whether this instance can create a visual panel. Methods Name Description CreatePanel() Creates a visual panel. DestroyPanel(UserControl) Destroys the panel."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.QsyDirection.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.QsyDirection.html",
    "title": "Enum QsyDirection | Ham Cockpit",
    "keywords": "Enum QsyDirection Direction of the frequency change. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public enum QsyDirection Remarks Used in the frequency navigation commands to request a band change or a switch to the next or previous band segment Fields Name Description Down Previous band or segment. Here Current band or segment. Up Next band or segment."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SamplesAvailableEventArgs.Count.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SamplesAvailableEventArgs.Count.html",
    "title": "Property Count | Ham Cockpit",
    "keywords": "Property Count View Source Count Gets the number of values. Declaration public int Count { get; } Property Value Type Description Int32 The number of available values in the data array."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SamplesAvailableEventArgs.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SamplesAvailableEventArgs.-ctor.html",
    "title": "Constructor SamplesAvailableEventArgs | Ham Cockpit",
    "keywords": "Constructor SamplesAvailableEventArgs View Source SamplesAvailableEventArgs(Single[], Int32, Int32) Initializes a new instance of the SamplesAvailableEventArgs class. Declaration public SamplesAvailableEventArgs(float[] data, int offset, int count) Parameters Type Name Description Single [] data The data. Int32 offset The offset. Int32 count The count."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SamplesAvailableEventArgs.Data.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SamplesAvailableEventArgs.Data.html",
    "title": "Property Data | Ham Cockpit",
    "keywords": "Property Data View Source Data Gets the data array. Declaration public float[] Data { get; } Property Value Type Description Single [] Audio or I/Q data."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SamplesAvailableEventArgs.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SamplesAvailableEventArgs.html",
    "title": "Class SamplesAvailableEventArgs | Ham Cockpit",
    "keywords": "Class SamplesAvailableEventArgs Event arguments class for the SamplesAvailable event Inheritance Object EventArgs SamplesAvailableEventArgs Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public sealed class SamplesAvailableEventArgs : EventArgs Constructors Name Description SamplesAvailableEventArgs(Single[], Int32, Int32) Initializes a new instance of the SamplesAvailableEventArgs class. Properties Name Description Count Gets the number of values. Data Gets the data array. Offset Offset if the first available value"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SamplesAvailableEventArgs.Offset.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SamplesAvailableEventArgs.Offset.html",
    "title": "Property Offset | Ham Cockpit",
    "keywords": "Property Offset View Source Offset Offset if the first available value Declaration public int Offset { get; } Property Value Type Description Int32 The offset if the first available value in the data array."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.Sideband.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.Sideband.html",
    "title": "Enum Sideband | Ham Cockpit",
    "keywords": "Enum Sideband The sideband of the signal. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public enum Sideband Remarks The signal is Upper sideband if higher frequencies in the sampled data correspond to higher RF frequencies. Examples of the Upper sideband signals are the audio demodulated in the USB mode, and I/Q (quadrature) signals. Examples of the Lower sideband are the audio demodulated in the LSB mode, and I/Q signals with the I and Q channels swapped. If there is no direct correspondence between the frequencies in the sampled data and RF frequencies, as in the demodulated FM signals, the signal sideband is None . Fields Name Description Lower The lower sideband. None The notion of sideband is not applicable. Upper The upper sideband."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.AUDIO_SAMPLING_RATE.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.AUDIO_SAMPLING_RATE.html",
    "title": "Field AUDIO_SAMPLING_RATE | Ham Cockpit",
    "keywords": "Field AUDIO_SAMPLING_RATE The sampling rate of audio signals. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public const int AUDIO_SAMPLING_RATE = 12000 Returns Type Description Int32"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.Channels.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.Channels.html",
    "title": "Property Channels | Ham Cockpit",
    "keywords": "Property Channels View Source Channels Gets or sets the number of channels. Declaration public int Channels { get; set; } Property Value Type Description Int32 The number of channels in the data stream."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.-ctor.html",
    "title": "Constructor SignalFormat | Ham Cockpit",
    "keywords": "Constructor SignalFormat View Source SignalFormat(Int32, Boolean, Boolean, Int32, Int32, Int32, Int32, Sideband, Single) Initializes a new instance of the SignalFormat class and sets all of its properties. Declaration public SignalFormat(int samplingRate, bool isComplex, bool isSync, int channels, int passbandLow, int passbandHigh, int dialOffset, Sideband sideband = Sideband.Upper, float stageGain = 0F) Parameters Type Name Description Int32 samplingRate The sampling rate. Boolean isComplex The IsComplex flag. Boolean isSync The IsSync flag. Int32 channels The number of channels. Int32 passbandLow The lower end of the signal spectrum. Int32 passbandHigh The upper end of the signal spectrum. Int32 dialOffset The dial frequency offset. Sideband sideband The sideband. Single stageGain The stage gain. View Source SignalFormat() Initializes a new instance of the SignalFormat class that describes a single-channel audio signal stream. Declaration public SignalFormat() View Source SignalFormat(SignalFormat) Initializes a new instance of the SignalFormat class. Declaration public SignalFormat(SignalFormat prototype) Parameters Type Name Description SignalFormat prototype The output format of the preceding signal processing stage."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.DialOffset.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.DialOffset.html",
    "title": "Property DialOffset | Ham Cockpit",
    "keywords": "Property DialOffset View Source DialOffset Gets or sets the dial frequency offset. Declaration public int DialOffset { get; set; } Property Value Type Description Int32 The offset in Hertz of the point in the sampled bandwidth that corresponds to the dial frequency"
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.html",
    "title": "Class SignalFormat | Ham Cockpit",
    "keywords": "Class SignalFormat Describes the format and characteristics of the signal samples in the data stream Inheritance Object SignalFormat Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public class SignalFormat Constructors Name Description SignalFormat() Initializes a new instance of the SignalFormat class that describes a single-channel audio signal stream. SignalFormat(Int32, Boolean, Boolean, Int32, Int32, Int32, Int32, Sideband, Single) Initializes a new instance of the SignalFormat class and sets all of its properties. SignalFormat(SignalFormat) Initializes a new instance of the SignalFormat class. Fields Name Description AUDIO_SAMPLING_RATE The sampling rate of audio signals. Properties Name Description Channels Gets or sets the number of channels. DialOffset Gets or sets the dial frequency offset. IsComplex Gets or sets a value indicating whether the samples are complex or real. IsSync Gets or sets a value indicating whether the channels of the multi-channel data stream are phase-synchronized or independent. PassbandHigh Gets or sets the upper end of the signal spectrum. PassbandLow Gets or sets the lower end of the signal spectrum. SamplingRate Gets or sets the sampling rate of the signal. Sideband Gets or sets the sideband of the signal. StageGain Gets or sets the stage gain. TotalGain Gets the total gain."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.IsComplex.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.IsComplex.html",
    "title": "Property IsComplex | Ham Cockpit",
    "keywords": "Property IsComplex View Source IsComplex Gets or sets a value indicating whether the samples are complex or real. Declaration public bool IsComplex { get; set; } Property Value Type Description Boolean true if the samples are complex; otherwise, false ."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.IsSync.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.IsSync.html",
    "title": "Property IsSync | Ham Cockpit",
    "keywords": "Property IsSync View Source IsSync Gets or sets a value indicating whether the channels of the multi-channel data stream are phase-synchronized or independent. Declaration public bool IsSync { get; set; } Property Value Type Description Boolean true if the channels are phase-synchronized; otherwise, false ."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.PassbandHigh.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.PassbandHigh.html",
    "title": "Property PassbandHigh | Ham Cockpit",
    "keywords": "Property PassbandHigh View Source PassbandHigh Gets or sets the upper end of the signal spectrum. Declaration public int PassbandHigh { get; set; } Property Value Type Description Int32 The upper end of the signal spectrum in Hertz."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.PassbandLow.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.PassbandLow.html",
    "title": "Property PassbandLow | Ham Cockpit",
    "keywords": "Property PassbandLow View Source PassbandLow Gets or sets the lower end of the signal spectrum. Declaration public int PassbandLow { get; set; } Property Value Type Description Int32 The lower end of the signal spectrum in Hertz."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.SamplingRate.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.SamplingRate.html",
    "title": "Property SamplingRate | Ham Cockpit",
    "keywords": "Property SamplingRate View Source SamplingRate Gets or sets the sampling rate of the signal. Declaration public int SamplingRate { get; set; } Property Value Type Description Int32 The sampling rate."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.Sideband.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.Sideband.html",
    "title": "Property Sideband | Ham Cockpit",
    "keywords": "Property Sideband View Source Sideband Gets or sets the sideband of the signal. Declaration public Sideband Sideband { get; set; } Property Value Type Description Sideband The sideband. Remarks The sideband is Upper if higher frequencies in the sampled data correspond to higher RF frequencies; Lower otherwise."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.StageGain.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.StageGain.html",
    "title": "Property StageGain | Ham Cockpit",
    "keywords": "Property StageGain View Source StageGain Gets or sets the stage gain. Declaration public float StageGain { get; set; } Property Value Type Description Single The gain of the current signal processing stage, in dB."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.TotalGain.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.SignalFormat.TotalGain.html",
    "title": "Property TotalGain | Ham Cockpit",
    "keywords": "Property TotalGain View Source TotalGain Gets the total gain. Declaration public float TotalGain { get; } Property Value Type Description Single The total gain, in dB, of all signal processing stages, from the signal source to the current stage."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.StoppedEventArgs.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.StoppedEventArgs.-ctor.html",
    "title": "Constructor StoppedEventArgs | Ham Cockpit",
    "keywords": "Constructor StoppedEventArgs View Source StoppedEventArgs(Exception) Initializes a new instance of the StoppedEventArgs class. Declaration public StoppedEventArgs(Exception exception) Parameters Type Name Description Exception exception The exception."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.StoppedEventArgs.Exception.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.StoppedEventArgs.Exception.html",
    "title": "Field Exception | Ham Cockpit",
    "keywords": "Field Exception The exception that caused the data source stop. Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public readonly Exception Exception Returns Type Description Exception The exception."
  },
  "api/VE3NEA.HamCockpit.PluginAPI.StoppedEventArgs.html": {
    "href": "api/VE3NEA.HamCockpit.PluginAPI.StoppedEventArgs.html",
    "title": "Class StoppedEventArgs | Ham Cockpit",
    "keywords": "Class StoppedEventArgs Event arguments class for the Stopped event Inheritance Object EventArgs StoppedEventArgs Namespace : VE3NEA.HamCockpit.PluginAPI Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public sealed class StoppedEventArgs : EventArgs Constructors Name Description StoppedEventArgs(Exception) Initializes a new instance of the StoppedEventArgs class. Fields Name Description Exception The exception that caused the data source stop."
  },
  "api/VE3NEA.HamCockpit.PluginHelpers.CollectionEditorWithEvent.html": {
    "href": "api/VE3NEA.HamCockpit.PluginHelpers.CollectionEditorWithEvent.html",
    "title": "Class CollectionEditorWithEvent | Ham Cockpit",
    "keywords": "Class CollectionEditorWithEvent Provides a collection editor that can edit most types of collections in the Plugin Settings dialog. Inheritance Object UITypeEditor CollectionEditor CollectionEditorWithEvent Namespace : VE3NEA.HamCockpit.PluginHelpers Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public class CollectionEditorWithEvent : CollectionEditor Remarks If a property of collection type in the Settings object of a plugin needs to be edited in the Plugin Settings dialog, use this class as an Editor attribute for that property. Examples [Editor(typeof(CollectionEditorWithEvent), typeof(UITypeEditor))] public ModeColorList ModeColors { get; set; } = new ModeColorList();"
  },
  "api/VE3NEA.HamCockpit.PluginHelpers.EnumDescriptionConverter.html": {
    "href": "api/VE3NEA.HamCockpit.PluginHelpers.EnumDescriptionConverter.html",
    "title": "Class EnumDescriptionConverter | Ham Cockpit",
    "keywords": "Class EnumDescriptionConverter Provides a type converter that allows editing properties of enum type in the Plugin Settings dialog. Inheritance Object TypeConverter EnumConverter EnumDescriptionConverter Namespace : VE3NEA.HamCockpit.PluginHelpers Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public class EnumDescriptionConverter : EnumConverter Remarks If a property of enum type in the Settings object of a plugin needs to be edited in the Plugin Settings dialog, use this class as a TypeConverter attribute for that property. With this attribute, the editor shows the descriptions of enum values instead of the values themselves. Examples Enum values with descriptions: enum InputType { [Description(\"Left Channel\")] LeftChannel, [Description(\"Right Channel\")] RightChannel, [Description(\"Diversity (stereo)\")] DiversityStereo } TypeConverter attribute: [TypeConverter(typeof(EnumDescriptionConverter))] public InputType InputType { get; set; }"
  },
  "api/VE3NEA.HamCockpit.PluginHelpers.html": {
    "href": "api/VE3NEA.HamCockpit.PluginHelpers.html",
    "title": "Namespace VE3NEA.HamCockpit.PluginHelpers | Ham Cockpit",
    "keywords": "Namespace VE3NEA.HamCockpit.PluginHelpers Classes CollectionEditorWithEvent Provides a collection editor that can edit most types of collections in the Plugin Settings dialog. EnumDescriptionConverter Provides a type converter that allows editing properties of enum type in the Plugin Settings dialog. InputSoundcardNameConverter Provides a type converter that allows editing the input soundcard property in the Plugin Settings dialog. OutputSoundcardNameConverter Provides a type converter that allows editing the output soundcard property in the Plugin Settings dialog."
  },
  "api/VE3NEA.HamCockpit.PluginHelpers.InputSoundcardNameConverter.html": {
    "href": "api/VE3NEA.HamCockpit.PluginHelpers.InputSoundcardNameConverter.html",
    "title": "Class InputSoundcardNameConverter | Ham Cockpit",
    "keywords": "Class InputSoundcardNameConverter Provides a type converter that allows editing the input soundcard property in the Plugin Settings dialog. Inheritance Object TypeConverter StringConverter VE3NEA.HamCockpit.PluginHelpers.SoundcardNameConverter InputSoundcardNameConverter Namespace : VE3NEA.HamCockpit.PluginHelpers Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public class InputSoundcardNameConverter : SoundcardNameConverter Remarks If an input soundcard selection property in the Settings object of a plugin needs to be edited in the Plugin Settings dialog, use this class as a TypeConverter attribute for that property. The class populates the dropdown list with the names of available input soundcards and assigns DeviceID of the selected soundcard to the property. Examples [TypeConverter(typeof(InputSoundcardNameConverter))] public string Soundcard { get; set; }"
  },
  "api/VE3NEA.HamCockpit.PluginHelpers.OutputSoundcardNameConverter.html": {
    "href": "api/VE3NEA.HamCockpit.PluginHelpers.OutputSoundcardNameConverter.html",
    "title": "Class OutputSoundcardNameConverter | Ham Cockpit",
    "keywords": "Class OutputSoundcardNameConverter Provides a type converter that allows editing the output soundcard property in the Plugin Settings dialog. Inheritance Object TypeConverter StringConverter VE3NEA.HamCockpit.PluginHelpers.SoundcardNameConverter OutputSoundcardNameConverter Namespace : VE3NEA.HamCockpit.PluginHelpers Assembly : VE3NEA.HamCockpit.PluginAPI.dll Syntax public class OutputSoundcardNameConverter : SoundcardNameConverter Remarks If an output soundcard selection property in the Settings object of a plugin needs to be edited in the Plugin Settings dialog, use this class as a TypeConverter attribute for that property. The class populates the dropdown list with the names of available output soundcards and assigns DeviceID of the selected soundcard to the property. Examples [TypeConverter(typeof(InputSoundcardNameConverter))] public string Soundcard { get; set; }"
  },
  "api/VE3NEA.HamCockpit.SharedControls.FrequencyDisplayPanel.bandplan.html": {
    "href": "api/VE3NEA.HamCockpit.SharedControls.FrequencyDisplayPanel.bandplan.html",
    "title": "Field bandplan | Ham Cockpit",
    "keywords": "Field bandplan A reference to the band plan object. Namespace : VE3NEA.HamCockpit.SharedControls Assembly : VE3NEA.HamCockpit.SharedControls.dll Syntax public IBandPlan bandplan Returns Type Description IBandPlan Remarks Assign a reference to the band plan object to this field before using this control."
  },
  "api/VE3NEA.HamCockpit.SharedControls.FrequencyDisplayPanel.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.SharedControls.FrequencyDisplayPanel.-ctor.html",
    "title": "Constructor FrequencyDisplayPanel | Ham Cockpit",
    "keywords": "Constructor FrequencyDisplayPanel View Source FrequencyDisplayPanel() Initializes a new instance of the FrequencyDisplayPanel class. Declaration public FrequencyDisplayPanel()"
  },
  "api/VE3NEA.HamCockpit.SharedControls.FrequencyDisplayPanel.Dispose.html": {
    "href": "api/VE3NEA.HamCockpit.SharedControls.FrequencyDisplayPanel.Dispose.html",
    "title": "Method Dispose | Ham Cockpit",
    "keywords": "Method Dispose View Source Dispose(Boolean) Clean up any resources being used. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if managed resources should be disposed; otherwise, false. Overrides ContainerControl.Dispose(Boolean)"
  },
  "api/VE3NEA.HamCockpit.SharedControls.FrequencyDisplayPanel.html": {
    "href": "api/VE3NEA.HamCockpit.SharedControls.FrequencyDisplayPanel.html",
    "title": "Class FrequencyDisplayPanel | Ham Cockpit",
    "keywords": "Class FrequencyDisplayPanel A visual control that displays and sets the frequency. Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl FrequencyDisplayPanel Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Namespace : VE3NEA.HamCockpit.SharedControls Assembly : VE3NEA.HamCockpit.SharedControls.dll Syntax public class FrequencyDisplayPanel : UserControl, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IArrangedElement, IComponent, IDisposable, IContainerControl Remarks This control is used in the Frequency Display and Waterfall Display plugins to show and control the RX and TX frequencies if the radio. Other plugins may reuse it if they need the frequency display and control functions in their visual interface. Constructors Name Description FrequencyDisplayPanel() Initializes a new instance of the FrequencyDisplayPanel class. Fields Name Description bandplan A reference to the band plan object. PageSizeHz The page size for the Page Up and Page Down command. pipeline A reference to the DspPipeline e in the hosting application. Methods Name Description Dispose(Boolean) Clean up any resources being used. UpdateDisplayedInfo() Updates the displayed frequency and split information."
  },
  "api/VE3NEA.HamCockpit.SharedControls.FrequencyDisplayPanel.PageSizeHz.html": {
    "href": "api/VE3NEA.HamCockpit.SharedControls.FrequencyDisplayPanel.PageSizeHz.html",
    "title": "Field PageSizeHz | Ham Cockpit",
    "keywords": "Field PageSizeHz The page size for the Page Up and Page Down command. Namespace : VE3NEA.HamCockpit.SharedControls Assembly : VE3NEA.HamCockpit.SharedControls.dll Syntax public int PageSizeHz Returns Type Description Int32 Remarks The default page size is 10 kHz."
  },
  "api/VE3NEA.HamCockpit.SharedControls.FrequencyDisplayPanel.pipeline.html": {
    "href": "api/VE3NEA.HamCockpit.SharedControls.FrequencyDisplayPanel.pipeline.html",
    "title": "Field pipeline | Ham Cockpit",
    "keywords": "Field pipeline A reference to the DspPipeline e in the hosting application. Namespace : VE3NEA.HamCockpit.SharedControls Assembly : VE3NEA.HamCockpit.SharedControls.dll Syntax public IDspPipeline pipeline Returns Type Description IDspPipeline Remarks Assign a reference to the DspPipeline to this field before using this control."
  },
  "api/VE3NEA.HamCockpit.SharedControls.FrequencyDisplayPanel.UpdateDisplayedInfo.html": {
    "href": "api/VE3NEA.HamCockpit.SharedControls.FrequencyDisplayPanel.UpdateDisplayedInfo.html",
    "title": "Method UpdateDisplayedInfo | Ham Cockpit",
    "keywords": "Method UpdateDisplayedInfo View Source UpdateDisplayedInfo() Updates the displayed frequency and split information. Declaration public void UpdateDisplayedInfo() Remarks This method reads the dial frequency, split status and split offset from the DspPipeline and updates the displayed information."
  },
  "api/VE3NEA.HamCockpit.SharedControls.FrequencyEntryForm.-ctor.html": {
    "href": "api/VE3NEA.HamCockpit.SharedControls.FrequencyEntryForm.-ctor.html",
    "title": "Constructor FrequencyEntryForm | Ham Cockpit",
    "keywords": "Constructor FrequencyEntryForm View Source FrequencyEntryForm() Initializes a new instance of the FrequencyEntryForm class. Declaration public FrequencyEntryForm()"
  },
  "api/VE3NEA.HamCockpit.SharedControls.FrequencyEntryForm.Dispose.html": {
    "href": "api/VE3NEA.HamCockpit.SharedControls.FrequencyEntryForm.Dispose.html",
    "title": "Method Dispose | Ham Cockpit",
    "keywords": "Method Dispose View Source Dispose(Boolean) Clean up any resources being used. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if managed resources should be disposed; otherwise, false. Overrides Form.Dispose(Boolean)"
  },
  "api/VE3NEA.HamCockpit.SharedControls.FrequencyEntryForm.EnteredFrequency.html": {
    "href": "api/VE3NEA.HamCockpit.SharedControls.FrequencyEntryForm.EnteredFrequency.html",
    "title": "Field EnteredFrequency | Ham Cockpit",
    "keywords": "Field EnteredFrequency The frequency entered by the user, in Hertz. Namespace : VE3NEA.HamCockpit.SharedControls Assembly : VE3NEA.HamCockpit.SharedControls.dll Syntax public long EnteredFrequency Returns Type Description Int64"
  },
  "api/VE3NEA.HamCockpit.SharedControls.FrequencyEntryForm.html": {
    "href": "api/VE3NEA.HamCockpit.SharedControls.FrequencyEntryForm.html",
    "title": "Class FrequencyEntryForm | Ham Cockpit",
    "keywords": "Class FrequencyEntryForm A dialog for manual entry of the frequency. Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl Form FrequencyEntryForm Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Namespace : VE3NEA.HamCockpit.SharedControls Assembly : VE3NEA.HamCockpit.SharedControls.dll Syntax public class FrequencyEntryForm : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IArrangedElement, IComponent, IDisposable, IContainerControl Remarks This dialog is used in the FrequencyDisplayPanel control for manual entry of the frequency to tune to. Constructors Name Description FrequencyEntryForm() Initializes a new instance of the FrequencyEntryForm class. Fields Name Description EnteredFrequency The frequency entered by the user, in Hertz. Methods Name Description Dispose(Boolean) Clean up any resources being used."
  },
  "api/VE3NEA.HamCockpit.SharedControls.html": {
    "href": "api/VE3NEA.HamCockpit.SharedControls.html",
    "title": "Namespace VE3NEA.HamCockpit.SharedControls | Ham Cockpit",
    "keywords": "Namespace VE3NEA.HamCockpit.SharedControls Classes FrequencyDisplayPanel A visual control that displays and sets the frequency. FrequencyEntryForm A dialog for manual entry of the frequency. LedFont Provides a 7-segment LED font."
  },
  "api/VE3NEA.HamCockpit.SharedControls.LedFont.Family.html": {
    "href": "api/VE3NEA.HamCockpit.SharedControls.LedFont.Family.html",
    "title": "Property Family | Ham Cockpit",
    "keywords": "Property Family View Source Family Gets the font family. Declaration public static FontFamily Family { get; } Property Value Type Description FontFamily The font family."
  },
  "api/VE3NEA.HamCockpit.SharedControls.LedFont.html": {
    "href": "api/VE3NEA.HamCockpit.SharedControls.LedFont.html",
    "title": "Class LedFont | Ham Cockpit",
    "keywords": "Class LedFont Provides a 7-segment LED font. Inheritance Object LedFont Namespace : VE3NEA.HamCockpit.SharedControls Assembly : VE3NEA.HamCockpit.SharedControls.dll Syntax public class LedFont Examples This code assigns the LED font to the Frequencylabel control: FrequencyLabel.Font = new Font(LedFont.Family, FrequencyLabel.Font.Size); Properties Name Description Family Gets the font family."
  },
  "developers_guide/intro.html": {
    "href": "developers_guide/intro.html",
    "title": "Introduction | Ham Cockpit",
    "keywords": "Introduction Coming soon"
  },
  "index.html": {
    "href": "index.html",
    "title": "Ham Cockpit | Ham Cockpit",
    "keywords": "Ham Cockpit Radio Amateur's integrated environment Copyright © 2020 Alex Shovkoplyas VE3NEA freeware Tested on Windows 10 , but may work on the earlier versions of Windows as well. Please try and let me know! Ham Cockpit Ham Cockpit is a program of a new type. All of its functions are implemented in the plugins, the main program simply loads the plugins and helps them work together. Some standard plugins come with the software, a wide variety of optional and third party plugins will hopefully be available soon. Due to the modular approach taken to the extreme, Ham Cockpit becomes an integrated environment for a Radio Amateur that every user can build according to his needs. By installing the right plugins, one will be able to turn the program into an SDR client, a logger, a cluster monitor, a propagation prediction tool, etc., etc. - or have any combination of these working together in one program (once the corresponding plugins are available). Ham Cockpit 1.0 This is the very first release of Ham Cockpit , it includes only a handful of plugins that turn it into an SDR client. Moreover, this version has drivers only for the ICOM IC-7610 radio , making use of its I/Q streaming capability, and Afedri-822x SDR . Don't worry, the drivers are just plugins, more radios will be supported soon. Note Despite the small number of currently available plugins, the program in its present state is an ideal tool for cracking CW pileups that I am already using on the air. I built it as part of my preparation to work 3Y0I , the only announced DXpedition to a country on my needed list. At 330 DXCC entities confirmed, I need just one more to win the Honor Roll award, so I did my best to get the right tool for the job. Third Party Developers All software developers are welcome to create their own plugins for Ham Cockpit : open source, freeware, shareware - your choice. If you have an idea of a new signal processing algorithm, it will be much easier for you to create a plugin that implements it than to build a stand alone application with its own audio input and output, radio control, settings dialog, etc. In a plugin, you will just write the interesting part and let Ham Cockpit do the rest. What kinds of plugins can you create? Not just the signal processing ones. Any function useful for Radio Amateurs could become your next plugin. QSO logging, cluster monitoring, award tracking, propagation prediction, contesting, SO2R operation - the choice is limited only by your imagination. A short Plugin Developer's Guide is now available for those who want to start writing plugins. I am working on a complete set of plugin API documentation, including the source code of selected plugins. Non-programmers are also welcome to participate in the Ham Cockpit project. You can help with documentation, tutorials, video demos or data preparation. One area where data needs to be prepared is band plans . Currently we have only one band plan, for the Ham bands in the USA and Canada. We need band plans for other countries, broadcasting band plans, UHF band plans, etc. Downloads Download Ham Cockpit Download additional plugins Resources Online User's Guide Printable User's Guide (PDF) Ham Cockpit Forum Waterfall demo on YouTube"
  },
  "users_guide/configuration.html": {
    "href": "users_guide/configuration.html",
    "title": "Configuration | Ham Cockpit",
    "keywords": "Configuration Virtually all functions in Ham Cockpit are implemented in the plugins. To configure the program, just configure the settings of the installed plugins. Click on the View / Plugin Settings command in the menu to open the Plugin Settings dialog. The left panel of the Plugin Settings dialog shows all installed plugins. Click on the plugin to select it for configuration and edit its settings on the right panel. Click on the Save button to save all changes and close the dialog. The Apply button saves the changes but does not close the dialog. To reset the setting to its default value, right-click on the setting name and click on Reset in the popup menu. Click on the checkbox next to each plugin name to enable or disable the plugin. Another way to disable a plugin permanently is to simply delete its DLL file from the installation folder. For some plugin types the order is important. For example, Audio Processors are applied to the signals in the same order in which they appear in the Plugin Settings dialog. Drag and drop such plugins to change their order. Warning Some of the plugins that come with Ham Cockpit perform audio input and output, control the radio via a USB or RS-232 port, or work with other non-standard hardware in various ways. Be sure to configure them properly before you start using them."
  },
  "users_guide/cover.html": {
    "href": "users_guide/cover.html",
    "title": "Ham Cockpit | Ham Cockpit",
    "keywords": "Ham Cockpit Radio Amateur's integrated envoronment Copyright (c) 2020 Alex Shovkoplyas VE3NEA Please visit the Ham Cockpit web site for general information."
  },
  "users_guide/docking.html": {
    "href": "users_guide/docking.html",
    "title": "Docking | Ham Cockpit",
    "keywords": "Docking Visual plugins installed in Ham Cockpit may be opened and closed using the View menu and arranged in the desired layout using drag-and-drop. The visual panels may be docked inside the docking area of the main program. To dock a panel, drag it to the main window with a mouse and drop it on one of the drop target icons that appear when the panel is over the docking area: The panels may be arranged in many different ways, play with the docking system to see what is possible: The plugin panels may be left floating if desired: The program saves the panel layout on exit and restores it on the next start."
  },
  "users_guide/dsp_pipeline.html": {
    "href": "users_guide/dsp_pipeline.html",
    "title": "DSP Pipeline | Ham Cockpit",
    "keywords": "DSP Pipeline The plugins that perform digital signal processing are organized in a DSP Pipeline . When working with the SDR radios and other devices that produce wideband quadrature (I/Q) signals, the pipeline looks like this: Signal source receives I/Q data from an external device and controls the radio settings. Example: IC-7610 I/Q plugin. I/Q processors process I/Q data received from the signal source. Demodulator converts I/Q data to the audio suitable for listening. Audio processors process demodulated audio in different ways. Examples are Bandpass Filter and AGC plugins. Audio Output sends processed audio to a soundcard or another device. Transmitter controls the transmit frequency, Split mode and T/R switch in the transmitter. If the radio outputs already demodulated signals, such as audio output of the conventional transceivers, the pipeline includes only a subset of stages: Signal source receives audio data from an external device and controls the radio settings. Example: Conventional Receiver plugin. Audio processors Audio Output Transmitter The DSP Pipeline is represented visually with a toolstrip on the program toolbar. By clicking on the toolbar buttons, the user can start and stop the signal source, turn the audio on and off and switch the radio to the RX or TX mode. The drop-down lists attached to the buttons allow the user to select the signal source demodulator and transmitter In case of an audio data source, the program receives audio signals already demodulated in the receiver. When such signal source is selected, the demodulator plugins are not used, and the Mode dropdown list has commands to change the mode in the radio via its CAT interface:"
  },
  "users_guide/faq.html": {
    "href": "users_guide/faq.html",
    "title": "Frequently Asked Questions | Ham Cockpit",
    "keywords": "Frequently Asked Questions Q: How can I ask questions about Ham Cockpit? A: You can post your questions to the Ham Cockpit forum , or click on the Help / Email the Author command in the program menu and send a direct email to the author. Q: I downloaded the plugins and unzipped them to the HamCockpit folder, but they did not appear in the program. A: You have to unblock the zip file before you extract the plugins: right-click on the zip, click on Properties in the popup menu, tick the Unblock checkbox, then click on OK. Q Where are the data files used by Ham Cockpit located? A There are two folders that contain the Ham Cockpit data files: User Data Folder contains the data specific to the current user, including: HamCockpit.json , the file that stores all settings of the program HamCockpit.log , the error log file. Reference Data Folder contains read-only reference data, such as band plans. Both folders can be opened via the Help menu or by typing these paths in File Explorer: %appdata%\\Afreet\\Products\\HamCockpit %programdata%\\Afreet\\HamCockpit\\"
  },
  "users_guide/installation.html": {
    "href": "users_guide/installation.html",
    "title": "Installation | Ham Cockpit",
    "keywords": "Installation To install Ham Cockpit download the setup package double-click on the downloaded zip file to open it in File Explorer double-click on the HamCockpitSetup.exe file in the zip follow the on-screen instructions Play with the program and get familiar with its functions. Once you feel that you need more plugins, proceed to installing the additional plugins package. To install additional plugins download the additional plugins package, HamCockpitPlugins.zip right-click on the downloaded zip file, click on Properties in the popup menu, tick the Unblock checkbox, and click on OK . double-click on the zip file to open it in File Explorer extract all files from the zip to the folder where Ham Cockpit is installed start Ham Cockpit , click on View / Plugin Settings in the menu and configure the installed plugins. To uninstall Ham Cockpit On Windows 10 right-click on the Start button click on Apps and Features in the popup menu select Ham Cockpit in the list of installed programs click on the Uninstall button"
  },
  "users_guide/omnirig.html": {
    "href": "users_guide/omnirig.html",
    "title": "OmniRig | Ham Cockpit",
    "keywords": "OmniRig OmniRig is a freeware CAT control engine used in over 50 applications . All programs that support OmniRig can access the radio simultaneously. Some Ham Cockpit plugins, such as Conventional Receiver , use this engine. If you install one of those plugins, make sure that you have the latest version of OmniRig . To install or update OmniRig , download it from the link below and run the Setup program. OmniRig is extensible, one can add support of a new radio by creating an INI file with the description of its CAT commands. The INI files are located in this folder: C:\\Program Files (x86)\\Afreet\\OmniRig\\Rigs To get the latest set of INI files, download the INI Files for OmniRig package and unzip all files into the Rigs folder. Most of the INI files have been contributed by the users. Open the file in Notepad to see who created it and how to contact the author. If your radio is currently not supported, you can create your own INI for it. The documentation and tools required for INI file creation are available on the OmniRig web page . Tip Delete the unused ini files from the Rigs folder to make OmniRig start faster. Resources OmniRig web page Download OmniRig Download INI Files for OmniRig"
  },
  "users_guide/plugins/afedri.html": {
    "href": "users_guide/plugins/afedri.html",
    "title": "Afedri-822x SDR Plugin | Ham Cockpit",
    "keywords": "Afedri-822x SDR Plugin Purpose This plugin is an interface to the Afedri-822x receiver. Works with the single, double and quad channel models. Only the Ethernet connection is supported, not the USB connection. Settings Multichannel Mode The plugin allows starting the radio in the single, double and quad channel modes if supported by the hardware. However, currently there are no plugins that could make use of multiple data streams provided by this plugin, so it is recommended to use the single-channel mode even if the radio has two or four channels. Sampling Rate This radio supports a discrete set of sampling rates. If an unsupported sampling rate is entered, it is replaced with the nearest supported value. 96 kHz is recommended since currently there are no plugins that could benefit from a higher sampling rate."
  },
  "users_guide/plugins/agc.html": {
    "href": "users_guide/plugins/agc.html",
    "title": "AGC Plugin | Ham Cockpit",
    "keywords": "AGC Plugin Purpose This plugin performs automatic gain control, keeping the output audio within a range of comfortable listening. Settings This plugin does not have any configurable settings. It is important to ensure that the plugin appears at the right place in the DSP Pipeline . Using drag-and-drop in the Plugin Settings dialog , put it after the Bandpass Filter but before Volume Control Note If AGC is placed before Bandpass Filter plugin, it reacts to the signals outside of the filter passband, causing so-called AGC pumping. If it is placed after the Volume Control plugin, audio level changes made with the Volume slider are effectively removed by AGC. Enable / Disable To enable or disable AGC, click on the AGC button on the toolbar:"
  },
  "users_guide/plugins/audio_output.html": {
    "href": "users_guide/plugins/audio_output.html",
    "title": "Audio Output to Soundcard Plugin | Ham Cockpit",
    "keywords": "Audio Output to Soundcard Plugin Purpose This plugin sends the audio processed in the program to the soundcard for listening. It is recommended to use a pair of headphones instead of a speaker, especially when copying weak signals. Settings Latency Experimental. Keep the default value. Soundcard The soundcard to which the audio is sent."
  },
  "users_guide/plugins/bandpass_filter.html": {
    "href": "users_guide/plugins/bandpass_filter.html",
    "title": "Bandpass Filter Plugin | Ham Cockpit",
    "keywords": "Bandpass Filter Plugin Purpose This plugin implements a digital bandpass filter for the received audio. The bandwidth of the filter is adjustable by the user. Settings Latency There is a trade-off between the sharpness of the filter skirts and the delay introduced by the filter. Increase the latency for a sharper filter, or decrease it for faster response. The default latency is 10 ms. Visual Representation Some plugins, such as Waterfall Display and Band Scope , provide visual representation of the filter and allow the user to adjust the filter passband to match the operating conditions. On the screenshot below, the blue rectangle 3 shows the extent of the filter passband. You can change the upper and lower cutoff frequencies of the filter by dragging the edges 2 and 4 of the filter rectangle. Since the SSB signal 1 being received is also shown, it is easy to match the filter to the signal. The green triangle 5 indicates the dial frequency of the radio. In the SSB mode it is the frequency of the suppressed carrier. In the CW mode, only the bandwidth of the filter is adjustable, the passband is always centered at the dial frequency. The next screenshot shows a CW signal and an unmodulated carrier near it. You could get rid of the carrier by setting the filter passband to its minimum, 20 Hz, but the sound of such narrowband audio is not pleasant to the ear. Normally you want to have the filter only as narrow as is needed to suppress the interference. Using the visual filter control in the waterfall display, you can set the filter bandwidth in such a way that the upper cutoff is just below the carrier, to have nice audio and no interference."
  },
  "users_guide/plugins/bandplan.html": {
    "href": "users_guide/plugins/bandplan.html",
    "title": "Band Plan Plugin | Ham Cockpit",
    "keywords": "Band Plan Plugin Purpose This is a non-visual plugin that works behind the scenes and provides the band plan data to other plugins. In particular, the Frequency Display plugin receives information from this plugin when it needs to switch to the next or previous band, and the Waterfall Display plugin uses band plan information to paint the band map. Settings Mode Colors Background colors for different Ham modes. Click on the ellipses button [...] to open the collection editor: Add or remove the entries on the left panel, and set the mode name and color on the right panel. Click on the OK button to save the changes. Band Plan Files Band Plan information is stored in the JSON files located in this folder: C:\\ProgramData\\Afreet\\HamCockpit\\VE3NEA\\BandPlans The users may create their own band plan files with a text editor and switch between them using a drop-down list on the Toolbar It is recommended to have at least two band plans, one for the regular operation and another for contesting, since frequency allocation by mode changes significantly during the contests. Band Plan File Format The band plan file contains a list of band segments. Each segment has these parameters: Band - the band name, preferably as defined in the ADIF format. StartFrequency , EndFrequency - the boundaries of the band, in Hertz. DefaultFrequency - when changing the bands, the radio will be initially tuned to this frequency. Assumed to be equal to StartFrequency if not specified. PrimaryMode - the main mode in the given frequency segment. Used, in particular, to infer the mode of a cluster spot from its frequency. ValidModes - all modes allowed in the segment. Used, in particular, by the skimmer plugins to determine where to decode a particular mode. If not specified, assumed to include only the primary mode. MainSegment - On some bands, there is more than one segment used for a particular mode. For example, the 14074-14078 kHz and 14095-14099 kHz segments are used for FT8 on the 20m band. One of these segments must be marked as main. Remark - optional text that will be appended to the segment label when information about the segment is displayed. For example, \"F/H\" is a remark in the 14095-14099 kHz segment because this segment is used for the Fox-and-Hound style QSO. The mouse tooltip on the band map is a combination of the band, mode and remark: \"20M FT8 (F/H)\" Here is an example of segment definition: { \"Band\": \"40M\", \"StartFrequency\": 7000000, \"EndFrequency\": 7025000, \"PrimaryMode\": \"CW\", \"ValidModes\": [\"CW\",\"RTTY\"], \"MainSegment\": true, \"Remark\": \"Only Extra class in the USA\" }"
  },
  "users_guide/plugins/clock_demo.html": {
    "href": "users_guide/plugins/clock_demo.html",
    "title": "Clock Demo Plugin | Ham Cockpit",
    "keywords": "Clock Demo Plugin Purpose The Clock Demo plugin shows a UTC or Local Time clock on the toolbar. Click on the UTC indicator to switch between the UTC and local time. Note This plugin comes with source code to help plugin developers learn how to add their own controls to the toolbar. Settings Blink enable or disable blinking of the \":\" time separator Dock to Right move the clock to the right side of the toolbar:"
  },
  "users_guide/plugins/conventional_receiver.html": {
    "href": "users_guide/plugins/conventional_receiver.html",
    "title": "Conventional Receiver Plugin | Ham Cockpit",
    "keywords": "Conventional Receiver Plugin Purpose This plugin provides an interface to a conventional receiver that outputs demodulated audio and has CAT control via an RS-232 port. Most radios used by the Hams fall in this category, including the ICOM, Yaesu, Kenwood and Elecraft transceivers. Note This plugin makes use of the OmniRig engine. Make sure that you have the latest version of OmniRig installed on your system. Settings OmniRig Radio Select to use Rig1 or Rig2 in OmniRig for CAT control. Soundcard Select the soundcard that will be used to input the audio signals from the radio. Soundcard Channel Specify which channel of the stereo soundcard to use. CW, SSB and DIG Settings Each of these settings has three parameters: Passband High, Passband Low - the upper and lower cutoff frequencies of the filter in the radio. Dial Offset - the audio tone that corresponds to the dial frequency of the radio. Exlcusive, Latency Experimental, do not change. Explanation The Conventional Receiver plugin inputs audio signals in the range of 0 to 6000 Hz, but most radios produce the audio that occupies only a part of this range. For example, the radios in the CW mode typically have a 500-Hz filter that suppresses all signals outside of this range. The CW Settings , SSB Settings and RTTY Settings parameters tell the program what part of the input spectrum is usable in each mode. Other plugins use this information to show only that part of the spectrum on the waterfall, to decode signals only in that frequency range, etc. Examples In the CW mode, the CW Pitch setting in the radio is 800 Hz, and the filter bandwidth is 500 Hz. The settings should be: Dial Offset: 800 Hz Passband Low: 800 - 250 = 550 Hz Passband High: 800 + 250 = 1050 hz In the SSB mode, the filter passband is 300 - 2700 Hz, and the radio displays the frequency of the suppressed carrier (0 Hz audio). The settings should be: Dial Offset: 0 Hz Passband Low: 300 Hz Passband High: 2700Hz Status Bar The Conventional Receiver plugin shows an icon on the status bar that indicates current status of the CAT control interface. Place the mouse cursor over the icon to see information on the tooltip. Click on the icon to open the OmniRig setup dialog."
  },
  "users_guide/plugins/demodulators.html": {
    "href": "users_guide/plugins/demodulators.html",
    "title": "CW Demodulator Plugin | Ham Cockpit",
    "keywords": "CW Demodulator Plugin SSB Demodulator Plugin RTTY Demodulator Plugin Purpose The demodulator plugins are used to convert the I/Q signals received from an SDR radio into the audio signals for listening. These plugins are not used when the input to the program is already demodulated in the receiver. Settings Pitch The desired pitch of the demodulated audio, in Hertz. Recommended values: CW: 600 Hz RTTY: 2125 Hz SSB: must be 0 Hz."
  },
  "users_guide/plugins/frequency_display.html": {
    "href": "users_guide/plugins/frequency_display.html",
    "title": "Frequency Display Plugin | Ham Cockpit",
    "keywords": "Frequency Display Plugin Purpose This is a stand-alone version of the frequency display built into the Waterfall Display Plugin . See the description of that plugin for more information."
  },
  "users_guide/plugins/ic_7610_iq.html": {
    "href": "users_guide/plugins/ic_7610_iq.html",
    "title": "IC-7610 I/Q Plugin | Ham Cockpit",
    "keywords": "IC-7610 I/Q Plugin Purpose This plugin interfaces the program with the IC-7610 radio via its USB3 port, receives wideband I/Q data and controls the radio settings via the same port. OmniRig is not used by this plugin. Settings Use Sub-Receiver select to receive I/Q data from the main receiver or from the sub-receiver. Blocks per Second Experimental, use the default value. Tip Press the DUAL-W button on the radio to enable streaming of the sub-receiver I/Q data."
  },
  "users_guide/plugins/plugin_list.html": {
    "href": "users_guide/plugins/plugin_list.html",
    "title": "Plugin List Plugin | Ham Cockpit",
    "keywords": "Plugin List Plugin Shows the list of all plugins and their exported interfaces. This plugin is more useful for the developers than for the end users, but still could be handy for checking if the program finds the plugins that you have installed."
  },
  "users_guide/plugins/s_meter.html": {
    "href": "users_guide/plugins/s_meter.html",
    "title": "S-Meter Plugin | Ham Cockpit",
    "keywords": "S-Meter Plugin Purpose Shows the level of the audio sent to the soundcard for listening. Expressed in the dBFS units (dB Over Full Scale), relative to the maximum amplitude that the soundcard can reproduce."
  },
  "users_guide/plugins/volume_control.html": {
    "href": "users_guide/plugins/volume_control.html",
    "title": "Volume Control Plugin | Ham Cockpit",
    "keywords": "Volume Control Plugin Purpose Allows the operator to change the level of the output audio sent to the soundcard. Settings This control does not have any settings in the Plugin Settings Dialog . Be sure to put it after the AGC plugin in the DSP Pipeline , or AGC will undo the manual volume changes. Use drag-and-drop in the Plugin Settings Dialog to change the order of plugins."
  },
  "users_guide/plugins/waterfall.html": {
    "href": "users_guide/plugins/waterfall.html",
    "title": "Waterfall Display Plugin | Ham Cockpit",
    "keywords": "Waterfall Display Plugin Purpose This is a visual plugin that shows the waterfall display and a band map, and provides a number of commands to control the RX and TX frequencies and filter settings. The primary purpose of this plugin is to provide the means for visual navigation in the Ham bands. Settings Scale Background Color, Scale Foreground Color Use these settings to change the colors of the frequency scale. The colors of the band map may be configured in the Band Plan plugin settings. Controls Zoom slider . Controls the vertical zoom of the waterfall. Speed slider . Controls the horizontal speed of the waterfall. Relative Scale button . Switches between the absolute frequencies and frequency offsets on the frequency scale 8 . Signal trace . Left-click to tune the receiver at the signal. Right-click to enable the Split mode and set the transmit frequency. Ctrl-click to set a frequency mark ( 11 ). Tune Button . Used for paging the waterfall display up and down, switching between the band plan segments and changing the bands. Left-click - tune page up Right-click - tune page down Alt-Left-click - next band segment Alt-Right-click - previous band segment Ctrl-Left-click - band up Ctrl-Right-click - band down. Frequency Display . Shows the current dial frequency. Left-click - jump to the band start (mode dependent). Right-click - enter the new dial frequency manually. Split offset display . Shows the transmitter offset in the Split mode. Red color indicates that Split is enabled. Left-click to toggle Split On/Off Right-click to reset the Split offset to zero. Frequency scale . Shows either the absolute frequencies or frequency offsets, depending on the state of the button 3 . Drag up and down to pan the waterfall vertically without changing the dial frequency. Left-click to set the dial frequency Right-click to enable the Split mode and set the transmit frequency. Ctrl-click to set a frequency mark ( 11 ). Band Map . Shows the band segments using the data provided by the Band Plan plugin. Move the mouse cursor to see band plan information on the mouse tooltip. Transmit frequency indicator . Visible only when the Split mode is enabled. Frequency mark . Ctrl-click on the waterfall ( 4 ) or band map ( 10 ) to place a frequency mark. Up to 4 marks are available. Useful for tracking the listening pattern of a DX station. Bandpass filter . Represents the bandpass filter in the Bandpass Filter plugin. The blue rectangle shows the extent of the filter passband. Drag with the mouse to change the filter bandwidth. In the SSB mode the upper and lower cutoff frequencies are adjusted independently, in CW only the filter bandwidth may be adjusted. Dial frequency indicator . Left-click on the waterfall ( 4 ) or band map ( 10 ) to change the frequency. Example The video below was recorded with the IC-7610 I/Q plugin as signal source. It shows how to zoom and pan the waterfall, adjust filter passband and navigate the band using the mouse and dial knob."
  },
  "users_guide/roadmap.html": {
    "href": "users_guide/roadmap.html",
    "title": "Roadmap | Ham Cockpit",
    "keywords": "Roadmap Documentation Documentation is my top priority. I am working on this User's Guide, Plugin Developer's Guide and API Documentation . These plugins are in my immediate plans Conventional Transmitter , a plugin to control the transmitter in a conventional radio IF Adapter , support of the analog I/Q output from a conventional radio fed to a soundcard Bandscope , a band scope plugin Decoded Text Display , a panel that displays color-highlighted text produced by the CW/RTTY/Digi decoder plugins These plugins will come later Adapters for other SDR radios Spot Provider that downloads spots from the Telnet DX clusters, RBN and other sources Spot Manager that collects spots from all spot providers, archives them and serves spot data to other plugins Cluster Monitor , a visual plugin that shows the spots provided by Spot manager CW Decoder , a single-channel CW decoder based on the decoding algorithms used in CW Skimmer Logger Interface , a non-visual plugin that talks to the logger database and allows other plugins to add QSO, check the Needed status of the callsigns, etc. QSO Entry Box , a visual plugin to enter QSO to the logger database"
  },
  "users_guide/sidetone.html": {
    "href": "users_guide/sidetone.html",
    "title": "How to Add Sidetone to the Audio Processed in the Software | Ham Cockpit",
    "keywords": "How to Add Sidetone to the Audio Processed in the Software Digital signal processing of RX audio in the PC has many advantages, but it also presents a problem: the output does not include the sidetone. Sending Morse code without hearing the sidetone is virtually impossible, but fortunately, there is an easy solution: processed audio and sidetone can be mixed together in the soundcard. 1. Use a cheap soundcard dongle (a $1 one is OK!), connect the headphones to its output, and the sidetone to the Mic input: The sidetone may come from the Morse keyer or, if the keyer is built into the radio, from the Phones connector of the radio (but not from the ACC connector). Make sure that only the sidetone is present and receiver audio is muted. How to achieve this is radio-dependent: for example, in TS-570 you can set the IF gain to the minimum, and in IC-7610 you just press the Main AF knob. Configure the software to use the dongle for audio output: Click on the Windows Start button, type \"control panel\" and click on Control Panel , then click on Soundcard . Select your soundcard and click on Properties . Click on the Levels tab in the Soundcard Properties dialog, enable both Speakers and Microphone , and adjust their levels for comfortable listening: That's it! Now you can hear both audio from the PC and sidetone from your radio or Morse keyer."
  },
  "users_guide/thanks.html": {
    "href": "users_guide/thanks.html",
    "title": "Thanks | Ham Cockpit",
    "keywords": "Thanks This project uses quite a few free resources. Many thanks to their authors! Visual Studio 2019 , Community Edition IPP , Intel Integrated Performance Primitives CSCore , audio library for C# DockPanelSuite , docking library for C# SharpGL , OpenGL wrapper for C# Json.NET , JSON serializer for C# CSIntelPerfLibs , IPP wrapper for C# ScintillaNET , Scintilla text editor for C# MathNet.Numerics , math library for C# FTD3xx_Net , FTDI control library for C# ColorSlider , slider control for C# Win32Interop , Win32 Interop library for C# DocFX , documentation generator Icon by Freepik from www.flaticon.com"
  },
  "users_guide/third_party_plugins.html": {
    "href": "users_guide/third_party_plugins.html",
    "title": "Third Party Plugins | Ham Cockpit",
    "keywords": "Third Party Plugins Australian band plan by Graham Alston VK3GA"
  },
  "users_guide/user_interface.html": {
    "href": "users_guide/user_interface.html",
    "title": "User Interface | Ham Cockpit",
    "keywords": "User Interface The user interface of Ham Cockpit provides the framework that allows the plugins to show their toolstrips, status bar controls and visual panels. Status bar . Plugins can add controls to the status bar. In this example, the Conventional Receiver plugin shows an icon that indicates the status of the radio control interface. Caption bar . Shows the name and version of the program. Main Menu : File - click File / Exit to close the program View - show or hide visual plugins, edit plugin settings Help - access information about the program Toolbar . Contains the DSP Pipeline toolstrip and the toolstrips added by the installed plugins. Re-order the toolstrips using drag-and-drop. Docking area . Contains Docked visual plugins."
  },
  "users_guide/version_history.html": {
    "href": "users_guide/version_history.html",
    "title": "Version History | Ham Cockpit",
    "keywords": "Version History V.1.0.4 Small Fixes added exception logging improved error handling V.1.0.3 Small Fixes improved error handling V.1.0.2 Small Fixes fixed the User's Guide menu command fixed application icon V.1.0.1 Initial release The program includes these plugins: Afedri-822x SDR , an interface to the Afedri SDR radio IC-7610 I/Q , an interface to the USB3 I/Q stream of the Icom 7610 radio IC-7610 Transmitter , controls T/R, Split and TX frequency via USB3 CW, SSB and RTTY demodulators , demodulate I/Q signals to audio AGC , automatic gain control Bandpass Filter , a variable bandwidth filter for CW, SSB and RTTY Volume Control , a slider to control the level of the output audio Audio Output to Soundcard , sends processed audio to an audio device Waterfall Display , a feature-rich, CW-grade waterfall display Band Plan , a non-visual plugin that provides band plan data to other plugins The pack of additional plugins, a separate download, includes: Clock Demo , adds a UTC/Local time clock to the toolbar Conventional Receiver , an interface to a receiver that outputs demodulated audio Frequency Display , displays and controls the operating frequency and TX Split offset S-Meter , an analog-type meter that shows the audio output level Plugin List , a panel that shows the list of all installed plugins and interfaces they export"
  }
}